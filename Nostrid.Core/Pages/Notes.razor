@page "/note/{eventId}"
@page "/note/{eventId}/{childIndex:int}"
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public string EventId { get; set; } = null!;

    [Parameter, EditorRequired]
    public int ChildIndex { get; set; }
}

@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Interfaces;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService

<div class="fs-4 fw-bolder">Thread</div>

@if (noteTrees.Any())
{
    @if (noteNotFound)
    {
        <div class="text-secondary mb-2">
            <i class="bi bi-exclamation-triangle-fill"></i>
            <span>Thread not fully visible. Wait, or rotate the relays.</span>
        </div>
    }
}

@if (!noteTrees.Any())
{
    <div class="text-center px-3 py-2 border-top" style="margin: 0 -1rem;">
        <div class="spinner-border mx-3 my-2" role="status">
            <span class="visually-hidden">Waiting for feed...</span>
        </div>
    </div>
}
else
{
    <div style="margin-bottom: -1rem;">
        <NoteTreeViewer Trees="@noteTrees" MainEventId="@EventId" ChildIndex="@ChildIndex" NotClickable="true" />
    </div>
}

@code {
    /// <summary>
    /// This view has two modes
    /// - Note view: shows the subtree whose root is a given note up to 3 levels down
    /// - Thread view: shows one or more subtrees that make up the total thread (it can be many subtrees
    ///   because there may be missing notes), up to 3 levels down
    /// To choose which mode to use, we use this logic:
    /// - Thread view if the note is visible in this view
    /// - Note view in the rest of the cases
    /// </summary>
    private List<NoteTree> noteTrees = new();
    private SubscriptionFilter? eventFilter;
    private bool noteNotFound;
    private string? rootId;

    private DateTime lastUpdate;
    private Task? updateTask;
    private CancellationTokenSource cancellationTokenSource = new();

    private const int MinSecondsBetweenUpdates = 3;

    private static readonly object lockTree = new();

    protected override void OnParametersSet()
    {
        Cleanup();

        cancellationTokenSource = new();

        feedService.NoteReceivedChild += NoteReceivedChild;
        feedService.ReceivedNotes += ReceivedNotes;

        lastUpdate = DateTime.UtcNow;

        noteTrees = new();
        noteNotFound = false;

        Task.Run(() =>
        {
            var notes = feedService.GetNotesThread(EventId, out rootId);
            TruncateTreeIfNeeded(notes);
            UpdateEventFilters();
            InvokeAsync(() => StateHasChanged());
        },
        cancellationTokenSource.Token);
    }

    private void TruncateTreeIfNeeded(IEnumerable<Event> newNotes)
    {
        lock (lockTree)
        {
            feedService.GetTreesFromNotes(newNotes, noteTrees);
            var requestedNode = noteTrees.Find(EventId, out var maxExceeded, NoteViewer.MaxChildren);
            noteNotFound = requestedNode == null;
            if (requestedNode != null && (maxExceeded || requestedNode.RenderLevel >= NoteViewer.MaxNestingLevel || ChildIndex > 0))
            {
                noteTrees = new List<NoteTree>() { requestedNode };
            }
        }
    }

    private void NoteReceivedChild(object? sender, (string EventId, Event Child) data)
    {
        Task.Run(() =>
        {
            if (data.Child.Kind != NostrKind.Text || (data.Child.ReplyToRootId != rootId && data.Child.Id != rootId))
                return;

            TruncateTreeIfNeeded(new[] { data.Child });

            if (updateTask != null)
            {
                return;
            }

            UpdateIfNeeded();
        },
        cancellationTokenSource.Token);
    }

    private void UpdateIfNeeded()
    {
        var waitFor = lastUpdate.AddSeconds(MinSecondsBetweenUpdates) < DateTime.UtcNow ? 0 : MinSecondsBetweenUpdates;
        updateTask = Task.Delay(TimeSpan.FromSeconds(waitFor)).ContinueWith((_) =>
        {
            UpdateEventFilters();
            InvokeAsync(() => StateHasChanged());
            updateTask = null;
        });
    }

    private void ReceivedNotes(object? sender, (string filterId, IEnumerable<Event> events) data)
    {
        Task.Run(() =>
        {
            var notesToAdd = data.events.Where(e => e.Kind == NostrKind.Text && (e.Id == rootId || e.ReplyToRootId == rootId));
            if (!notesToAdd.Any())
            {
                return;
            }

            TruncateTreeIfNeeded(notesToAdd);

            if (updateTask != null)
            {
                return;
            }

            UpdateIfNeeded();
        },
        cancellationTokenSource.Token);
    }

    private static object atomicSwap = new object();
    private void UpdateEventFilters()
    {
        SubscriptionFilter addedFilter, oldFilter;
        List<Event> renderedNValues;
        lock (lockTree)
        {
            renderedNValues = noteTrees.AllNotes();
        }
        var ids = renderedNValues.SelectMany(t => new[] { t.Id, t.ReplyToId, t.ReplyToRootId }).Union(new[] { EventId }).Where(t => !string.IsNullOrEmpty(t)).Distinct();
        relayService.AddFilter(addedFilter = new EventSubscriptionFilter(ids.ToArray()));
        lock (atomicSwap)
        {
            (eventFilter, oldFilter) = (addedFilter, eventFilter);
        }
        relayService.DeleteFilter(oldFilter);
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        feedService.NoteReceivedChild -= NoteReceivedChild;
        if (eventFilter != null) relayService.DeleteFilter(eventFilter);
        cancellationTokenSource.Cancel();
    }
    #endregion

}
