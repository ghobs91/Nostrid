@page "/note/{eventId}"
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public string EventId { get; set; } = null!;
}

@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Interfaces;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService
@inject IClipboardService clipboardService

<div class="fs-4 fw-bolder">Thread</div>
<div class="fs-7 text-body-tertiary text-break mb-2">
    @ByteTools.PubkeyToNote(EventId, false)
    <button class="btn btn-sm text-secondary ms-1 mb-1 p-0" type="button"
            @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNote(EventId, false)))">
        <i class="bi bi-files"></i>
    </button>
</div>

@if (renderedN.Any())
{
    @if (!noteTrees.Exists(EventId) || 
        (!maxReached && (noteTrees.Count != 1 ||!string.IsNullOrEmpty(noteTrees[0].Note.ReplyToId))))
    {
        <div class="text-secondary mb-2">
            <i class="bi bi-exclamation-triangle-fill"></i>
            <span>Thread not fully visible. Wait, or rotate the relays.</span>
        </div>
    }
    else if (maxReached)
    {
        <div class="text-secondary mb-2">
            <i class="bi bi-exclamation-triangle-fill"></i>
            <span>Thread only partially visible due to excessive nesting.</span>
        </div>
    }
}

@if (!renderedN.Any())
{
    <div class="text-center px-3 py-2 border-top" style="margin: 0 -1rem;">
        <div class="spinner-border mx-3 my-2" role="status">
            <span class="visually-hidden">Waiting for feed...</span>
        </div>
    </div>
}
else
{
    <div style="margin-bottom: -1rem;">
        <NoteTreeViewer Trees="@noteTrees" NewestOnTop="true" MainEventId="@EventId" />
    </div>
}

@code {
    private ConcurrentDictionary<string, Event> renderedN = new();
    private List<NoteTree> noteTrees = new();
    private Timer? refreshTimer;
    private ConcurrentDictionary<string, SubscriptionFilter> detailsFiltersByAccountId = new();
    private SubscriptionFilter? eventFilter;
    private bool maxReached;
    
    private const int SecondsForDetailsFilters = 30;

    protected override void OnParametersSet()
    {
        Cleanup();

        renderedN = new();

        feedService.NoteReceivedChild += NoteReceivedChild;

        UpdateEventFilters();

        refreshTimer = new Timer(new TimerCallback(_ =>
        {
            if (_disposed)
                return;

            var copied = new List<Event>();
            var mustRefresh = EventExtension.Merge(renderedN, feedService.GetNotesThread(EventId, downLevels: 4, out maxReached), onCopy: (ev) => copied.Add(ev));

            if (copied.Any())
            {
                UpdateDetailFilters(copied);
                UpdateEventFilters();
                mustRefresh = true;
            }

            if (mustRefresh)
            {
                noteTrees = feedService.GetTreesFromNotes(renderedN.Values);
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 0, 3000);
    }

    private void UpdateDetailFilters(IEnumerable<Event> newEvents)
    {
        var accountIds = newEvents
            .SelectMany(n => new[] { n.PublicKey }.Union(n.GetMentions().Where(n => n.Type == 'p').Select(n => n.MentionId)))
            .Where(n => !detailsFiltersByAccountId.ContainsKey(n));
        foreach (var accountId in accountIds)
        {
            var filter = new AccountDetailsSubscriptionFilter(accountId)
            {
                DestroyOnEose = true,
                DestroyOnFirstEvent = true,
                DestroyOn = DateTimeOffset.UtcNow.AddSeconds(SecondsForDetailsFilters)
            };
            if (detailsFiltersByAccountId.GetOrAdd(accountId, filter) == filter)
            {
                relayService.AddFilter(filter);
            };
        }
    }

    private void NoteReceivedChild(object? sender, (string EventId, Event Child) data)
    {
        if (!renderedN.ContainsKey(data.EventId))
            return;

        renderedN[data.Child.Id] = data.Child;
        InvokeAsync(() => StateHasChanged());
    }

    private static object atomicSwap = new object();
    private void UpdateEventFilters()
    {
        SubscriptionFilter addedFilter, oldFilter;
        var renderedNValues = renderedN.Values;
        var ids = renderedNValues.SelectMany(t => new[] { t.Id, t.ReplyToId, t.ReplyToRootId }).Union(new[] { EventId }).Where(t => !string.IsNullOrEmpty(t)).Distinct();
        relayService.AddFilter(addedFilter = new EventSubscriptionFilter(ids.ToArray()));
        lock (atomicSwap)
        {
            (eventFilter, oldFilter) = (addedFilter, eventFilter);
        }
        relayService.DeleteFilter(oldFilter);
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        feedService.NoteReceivedChild -= NoteReceivedChild;
        refreshTimer?.Dispose();
        if (eventFilter != null) relayService.DeleteFilter(eventFilter);
        relayService.DeleteFilters(detailsFiltersByAccountId.Values);
    }
    #endregion

}
