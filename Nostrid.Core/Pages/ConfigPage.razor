@page "/config"
@using Nostrid.Data;
@using Nostrid.Model;

@inject ConfigService configService
@inject RelayService relayService

@implements IDisposable

<h2 class="mb-4">Options</h2>

<div class="mt-4 card shadow">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <h5 class="my-2">Proof of Work Configuration (NIP-13)</h5>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchShowDifficulty">
                    Display difficulty of notes
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchShowDifficulty"
                               checked="@configModel.ShowDifficulty"
                               @onchange="@(args => { configModel.ShowDifficulty = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-lg-6" for="rangeMinimumPow">
                    Minimum difficulty to accept notes
                    <span class="d-block text-secondary">To accept all set to 0</span>
                </label>
                <div class="col-lg-6">
                    <div class="d-flex">
                        <span class="me-3 badge text-bg-light">@configModel.MinDiffIncoming</span>
                        <input type="range" class="form-range" min="0" max="255" step="1" id="rangeMinimumPow"
                                @bind-value="@configModel.MinDiffIncoming" @bind-value:event="oninput" @onchange="@Save" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchPowCheck">
                    Strict PoW check
                    <span class="d-block text-secondary">Notes must explicitly indicate difficulty target</span>
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchPowCheck"
                               checked="@configModel.StrictDiffCheck"
                               @onchange="@(args => { configModel.StrictDiffCheck = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-lg-6" for="rangeTargetDiff">
                    Difficulty target for sending messages
                    <span class="d-block text-secondary">To disable PoW set to 0</span>
                </label>
                <div class="col-lg-6">
                    <div class="d-flex">
                        <span class="me-3 badge text-bg-light">@configModel.TargetDiffOutgoing</span>
                        <input type="range" class="form-range w-100" min="0" max="255" step="1" id="rangeTargetDiff"
                               @bind-value="@configModel.TargetDiffOutgoing" @bind-value:event="oninput" @onchange="@Save" />
                    </div>
                </div>
            </div>
        </li>
    </ul>
</div>

<div class="mt-4 card shadow">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <h5 class="my-2">Appearance</h5>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchTheme">
                    <i class="bi bi-moon-fill pe-1" aria-hidden="true"></i>
                    Use dark theme
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchTheme"
                               checked="@Theme"
                               @onchange="@(args => { Theme = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
    </ul>
</div>

<div class="mt-4 card shadow">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <h5 class="my-2">Relays</h5>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="manualRelayManagement">
                    Manual relay management
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="manualRelayManagement"
                               checked="@configModel.ManualRelayManagement"
                               @onchange="@(args => { configModel.ManualRelayManagement = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li>
        @if (relayService.Restarting)
        {
            <p>Restarting...</p>
        }
        else
        {
            <button class="btn btn-primary" @onclick="() => relayService.RestartNostrClients()">Restart connections</button>
            <p>You need to restart connections to apply any change here</p>
        }
        </li>
        <li>
            <InputText @bind-Value="@newRelayUri" />
            <button class="btn btn-primary" @onclick="@AddNewRelay">Add new</button>
        </li>
        @foreach (var relay in relays)
        {
            <li class="list-group-item">
                <div class="row g-2 align-items-center">
                    <label class="col-sm-6">
                        @relay.Uri
                    </label>
                    <div class="col-sm-6 d-flex flex-row justify-content-sm-end justify-content-md-end">
                        @if (configModel.ManualRelayManagement)
                        {
                            <div class="form-check form-switch p-0 m-0 me-4 text-nowrap">
                                <input type="checkbox" class="form-check-input m-0 me-1 fs-4" role="switch"
                                        checked="@relay.Read" id="relayRead@(relay.Id)"
                                        @onchange="@(args => { relay.Read = args.Value as bool? ?? false; SaveRelay(relay); })" />
                                <label class="form-check-label" for="relayRead@(relay.Id)">Read</label>
                            </div>
                            <div class="form-check form-switch p-0 m-0 me-4 text-nowrap">
                                <input type="checkbox" class="form-check-input m-0 me-1 fs-4" role="switch"
                                        checked="@relay.Write" id="relayWrite@(relay.Id)"
                                        @onchange="@(args => { relay.Write = args.Value as bool? ?? false; SaveRelay(relay); })" />
                                <label class="form-check-label" for="relayWrite@(relay.Id)">Write</label>
                            </div>
                        }
                        else
                        {
                            <div class="form-check form-switch p-0 m-0 me-4 text-nowrap">
                                <label class="form-check-label" for="relayPriority@(relay.Id)">Priority</label>
                                <span class="me-3 badge text-bg-light">@relay.Priority</span>
                                <input type="range"  min="0" max="10" step="1" id="relayPriority@(relay.Id)"
                                    @bind-value="@relay.Priority" @bind-value:event="oninput" @onchange="() => SaveRelay(relay)" />
                            </div>
                        }
                        <div class="d-flex flex-row flex-grow-1 flex-sm-grow-0 justify-content-end">
                            <button type="button" class="btn-close" @onclick="() => DeleteRelay(relay)"></button>
                        </div>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

<Scripts @ref="scripts" />

@code {
    private Scripts? scripts;
    private Config configModel = new();
    private List<Relay> relays = new();
    private string newRelayUri = string.Empty;

    public const string DARK_THEME = "dark";
    public const string LIGHT_THEME = "light";

    private bool Theme
    {
        get => string.IsNullOrEmpty(configModel?.Theme) || configModel?.Theme == DARK_THEME;
        set
        { 
            configModel.Theme = (value ? DARK_THEME : LIGHT_THEME);
            scripts?.InvokeVoid("setTheme", configModel.Theme);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        configModel = configService.MainConfig;
        ReloadRelays();
        relayService.ClientsStateChanged += ClientsStateChanged;
    }

    private void ReloadRelays()
    {
        relays = relayService.GetRelays();        
    }

    private void ClientsStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void Save()
    {
        configService.MainConfig = configModel;
    }

    private void SaveRelay(Relay relay)
    {
        relayService.SaveRelay(relay);
    }

    private void DeleteRelay(Relay relay)
    {
        relayService.DeleteRelay(relay.Id);
    }

    private void AddNewRelay()
    {
        if (relayService.AddNewRelayIfUnknown(newRelayUri))
        {
            newRelayUri = string.Empty;
            ReloadRelays();
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        relayService.ClientsStateChanged -= ClientsStateChanged;
    }
    #endregion
}