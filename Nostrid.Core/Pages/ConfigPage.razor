@page "/config"
@using Nostrid.Data;
@using Nostrid.Model;

@inject ConfigService configService
@inject RelayService relayService

<h2 class="mb-4">Options</h2>

<div class="mt-4 card shadow">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <h5 class="my-2">Proof of Work Configuration (NIP-13)</h5>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchShowDifficulty">
                    Display difficulty of notes
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchShowDifficulty"
                               checked="@configModel.ShowDifficulty"
                               @onchange="@(args => { configModel.ShowDifficulty = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-lg-6" for="rangeMinimumPow">
                    Minimum difficulty to accept notes
                    <span class="d-block text-secondary">To accept all set to 0</span>
                </label>
                <div class="col-lg-6">
                    <div class="d-flex">
                        <span class="me-3 badge text-bg-light">@configModel.MinDiffIncoming</span>
                        <input type="range" class="form-range" min="0" max="255" step="1" id="rangeMinimumPow"
                                @bind-value="@configModel.MinDiffIncoming" @bind-value:event="oninput" @onchange="@Save" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchPowCheck">
                    Strict PoW check
                    <span class="d-block text-secondary">Notes must explicitly indicate difficulty target</span>
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchPowCheck"
                               checked="@configModel.StrictDiffCheck"
                               @onchange="@(args => { configModel.StrictDiffCheck = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-lg-6" for="rangeTargetDiff">
                    Difficulty target for sending messages
                    <span class="d-block text-secondary">To disable PoW set to 0</span>
                </label>
                <div class="col-lg-6">
                    <div class="d-flex">
                        <span class="me-3 badge text-bg-light">@configModel.TargetDiffOutgoing</span>
                        <input type="range" class="form-range w-100" min="0" max="255" step="1" id="rangeTargetDiff"
                               @bind-value="@configModel.TargetDiffOutgoing" @bind-value:event="oninput" @onchange="@Save" />
                    </div>
                </div>
            </div>
        </li>
    </ul>
</div>

<div class="mt-4 card shadow">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <h5 class="my-2">Appearance</h5>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchTheme">
                    <i class="bi bi-moon-fill pe-1" aria-hidden="true"></i>
                    Use dark theme
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchTheme"
                               checked="@Theme"
                               @onchange="@(args => { Theme = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
    </ul>
</div>

<div class="mt-4 card shadow">
    <ul class="list-group list-group-flush">
        <li class="list-group-item">
            <h5 class="my-2">Relays</h5>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="manualRelayManagement">
                    Manual relay management
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="manualRelayManagement"
                               checked="@configModel.ManualRelayManagement"
                               @onchange="@(args => { configModel.ManualRelayManagement = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        @if (configModel.ManualRelayManagement)
        {
            @foreach (var relay in relayService.GetRelays())
            {
                <li class="list-group-item">
                    <div class="row align-items-center">
                        <label class="col-6" for="relay@(relay.Id)">
                            @relay.Uri
                        </label>
                        <div class="form-check form-switch m-0 p-0 fs-4">
                            <input type="checkbox" class="form-check-input m-0 float-end" role="switch"
                                checked="@relay.Read"
                                @onchange="@(args => { relay.Read = args.Value as bool? ?? false; SaveRelay(relay); })" />
                        </div>
                        <div class="form-check form-switch m-0 p-0 fs-4">
                            <input type="checkbox" class="form-check-input m-0 float-end" role="switch"
                                checked="@relay.Write"
                                @onchange="@(args => { relay.Write = args.Value as bool? ?? false; SaveRelay(relay); })" />
                        </div>
                        <button class="btn bi bi-x-circle" @onclick="() => DeleteRelay(relay)" />
                    </div>
                </li>
            }
        }
    </ul>
</div>

<Scripts @ref="scripts" />

@code {
    private Scripts? scripts;
    private Config configModel = new();

    public const string DARK_THEME = "dark";
    public const string LIGHT_THEME = "light";

    private bool Theme
    {
        get => string.IsNullOrEmpty(configModel?.Theme) || configModel?.Theme == DARK_THEME;
        set
        { 
            configModel.Theme = (value ? DARK_THEME : LIGHT_THEME);
            scripts?.InvokeVoid("setTheme", configModel.Theme);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        configModel = configService.MainConfig;
    }

    private void Save()
    {
        configService.MainConfig = configModel;
    }

    private void SaveRelay(Relay relay)
    {
        relayService.SaveRelay(relay);
    }

    private void DeleteRelay(Relay relay)
    {
        relayService.DeleteRelay(relay.Id);
    }
}