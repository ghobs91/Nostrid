@page "/account/{pubKey}"
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public string PubKey { get; set; } = null!;
}

@using Nostrid.Data;
@using Nostrid.Data.Relays;
@using Nostrid.Interfaces;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject AccountService accountService
@inject RelayService relayService
@inject IClipboardService clipboardService
@inject EventDatabase eventDatabase

<div class="bg-body-tertiary pt-3 ps-3 pe-3" style="margin: -1rem -1rem 0 -1rem;">

    <AccountPicture Details="@account.Details" Id="@account.Id" Size="128" />

    <div class="fs-4 fw-bolder"><AccountName Details="@account.Details" Id="@account.Id" /></div>
    <div class="fs-7 text-body-tertiary text-break mb-3">
        @ByteTools.PubkeyToNpub(PubKey)
        <div class="btn-group">
            <a role="button" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </a>
            <ul class="dropdown-menu">
                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNpub(PubKey)))" @onclick:stopPropagation="true">Copy Npub</a></li>
                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(PubKey))" @onclick:stopPropagation="true">Copy Hex</a></li>
            </ul>
        </div>
    </div>
    <p class="text-break">@account.Details?.About</p>

    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group me-3 mb-3" role="group" aria-label="First group">
            <button type="button" class="btn btn-outline-secondary" @onclick="OpenFollowsModal">
                Following <span class="badge text-bg-secondary"><FollowsCounter AccountId="@PubKey" /></span>
            </button>
            <button type="button" class="btn btn-outline-secondary" @onclick="OpenFollowersModal">
                Followers <span class="badge text-bg-secondary"><FollowsCounter AccountId="@PubKey" CountFollowers="true" /></span>
            </button>
        </div>
        @if (IsMainAccountLoaded && !IsMainAccount)
        {
            <div class="btn-group mb-3 me-3" role="group">
                <button type="button" class="btn @(!accountService.IsFollowing(PubKey) ? "btn-primary" : "btn-danger")" @onclick="@(async () => await FollowUnfollow(PubKey))">
                    @(!accountService.IsFollowing(PubKey) ? "Follow" : "Unfollow")
                </button>
            </div>
        }
        @if ((account.Details?.Lud16Id ?? account.Details?.Lud06Url).IsNotNullOrEmpty())
        {
            <div class="btn-group mb-3" role="group">
                <button type="button" class="btn btn-outline-primary" @onclick="@(() => payModal?.Show(account.Details))">
                    <i class="bi bi-lightning-charge"></i> Pay
                </button>
            </div>
        }
    </div>
</div>

<ModalContainer @ref="followsModal">
    <div class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-fullscreen-sm-down modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Following</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    @if (follows == null)
                    {
                        <div class="text-center my-5"> 
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Waiting for feed...</span>
                            </div>
                        </div>
                    }
                    else if (follows?.Count == 0)
                    {
                        <div class="p-3 h-100 d-flex flex-column align-items-center justify-content-center text-center">
                            <i class="fs-1 bi bi-person-x"></i>
                            @if (IsMainAccount)
                            {
                                <p class="fw-bold">No follows yet.</p>
                                <p>If you recently restored your account then your follows may take a few minutes to be discovered.</p>
                            }
                            else
                            {
                                <p class="fw-bold">No follows to show.</p>
                            }
                        </div>
                    }
                    @foreach (var following in follows ?? new List<string>())
                    {
                        <FollowAccount Account="@(GetAccount(following))"></FollowAccount>
                    }
                </div>
            </div>
        </div>
    </div>
</ModalContainer>

<ModalContainer @ref="followersModal">
    <div class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-fullscreen-sm-down modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Followers</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    @if (followers == null)
                    {
                        <div class="text-center my-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Waiting for feed...</span>
                            </div>
                        </div>
                    }
                    else if (followers?.Count == 0)
                    {
                        <div class="p-3 h-100 d-flex flex-column align-items-center justify-content-center text-center">
                            <i class="fs-1 bi bi-person-x"></i>
                            @if (IsMainAccount)
                            {
                                <p class="fw-bold">No followers yet.</p>
                                <p>If you recently restored your account then your followers may take a few minutes to be discovered.</p>
                            }
                            else
                            {
                                <p class="fw-bold">No followers to show.</p>
                            }
                        </div>
                    }
                    @foreach (var follower in followers ?? new List<string>())
                    {
                        <FollowAccount Account="@(GetAccount(follower))"></FollowAccount>
                    }
                </div>
            </div>
        </div>
    </div>
</ModalContainer>

<PayModal @ref="payModal" />

<FeedViewer BaseFilter="@feedFilter" MessageKinds="@(new[]{NostrKind.Text, NostrKind.Repost})" />

@code {
    private Account? account;
    private SubscriptionFilter? feedFilter, followsFilter, followersFilter;
    private SubscriptionFilter[] followsDetailsFilter = { };
    private ConcurrentDictionary<string, Account> accounts = new();
    private PayModal? payModal;
    private ModalContainer? followsModal, followersModal;
    private List<string>? follows, followers;
    private int followsInitialCount, followersInitialCount;

    private bool IsMainAccountLoaded => accountService.MainAccount != null;
    private bool IsMainAccount => IsMainAccountLoaded && PubKey == accountService.MainAccount?.Id;

    protected override void OnParametersSet()
    {
        Cleanup();
        followsModal?.Hide();
        followersModal?.Hide();

        accounts = new();
        account = accountService.GetAccount(PubKey);
        feedFilter = new AuthorSubscriptionFilter(PubKey);

        relayService.AddFilter(followsFilter = new FollowsSubscriptionFilter(PubKey));
        relayService.AddFilter(followersFilter = new FollowersSubscriptionFilter(PubKey));
        accountService.RegisterFollowerRequestFilter(followersFilter.Id, PubKey);

        accountService.AccountDetailsChanged += AccountDetailsChanged;
        accountService.AccountFollowsChanged += AccountFollowsChanged;
        accountService.AccountFollowersChanged += AccountFollowersChanged;

        follows = null;
        followers = null;
        followsInitialCount = eventDatabase.GetFollowCount(PubKey);
        followersInitialCount = eventDatabase.GetFollowerCount(PubKey);
    }

    private Account GetAccount(string accountId)
    {
        return accounts.GetOrAdd(accountId, _ => accountService.GetAccount(accountId));
    }

    private void AccountDetailsChanged(object? sender, (string accountId, AccountDetails details) data)
    {
        if (_disposed)
            return;
        if (data.accountId == account?.Id)
        {
            account.Details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
        else
        {
            if (!follows?.Contains(data.accountId) ?? false)
                return;
            if (!accounts.TryGetValue(data.accountId, out Account followAccount))
                return;
            followAccount.Details = data.details;
        }
    }

    private void AccountFollowsChanged(object? sender, (string accountId, List<string> follows) data)
    {
        if (_disposed)
            return;
        if (data.accountId != PubKey)
            return;
        if (follows != null
            && Enumerable.SequenceEqual(data.follows.OrderBy(e => e), follows.OrderBy(e => e)))
            return;
        follows = data.follows;
        if (followsModal?.IsVisible() ?? false)
        {
            UpdateSubscriptionForDetails();
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void AccountFollowersChanged(object? sender, string accountId)
    {
        if (_disposed)
            return;
        if (accountId != PubKey)
            return;
        var newFollowers = eventDatabase.GetFollowerIds(accountId);
        if (followers != null
            && Enumerable.SequenceEqual(newFollowers.OrderBy(e => e), followers.OrderBy(e => e)))
            return;
        followers = newFollowers;
        if (followersModal?.IsVisible() ?? false)
        {
            UpdateSubscriptionForDetails();
            InvokeAsync(() => StateHasChanged());
        }
    }

    private static object atomicSwap = new object();
    private void UpdateSubscriptionForDetails()
    {
        SubscriptionFilter[] addedFilters = { }, oldFilters;
        if ((follows?.Any() ?? false) || (followers?.Any() ?? false))
        {
            var accountIds = (follows ?? new List<string>()).Union(followers ?? new List<string>());
            relayService.AddFilters(addedFilters = AccountDetailsSubscriptionFilter.CreateInBatch(accountIds.ToArray()).ToArray());
        }
        lock (atomicSwap)
        {
            (followsDetailsFilter, oldFilters) = (addedFilters, followsDetailsFilter);
        }
        relayService.DeleteFilters(oldFilters);
    }

    private async Task FollowUnfollow(string pubKey)
    {
        await accountService.FollowUnfollow(pubKey, accountService.IsFollowing(pubKey));
    }

    private void OpenFollowsModal()
    {
        Task.Run(() =>
        {
            if (follows == null)
            {
                follows = eventDatabase.GetFollowIds(PubKey);
                InvokeAsync(() => StateHasChanged());
            }
            UpdateSubscriptionForDetails();
        });
        followsModal?.Show();
    }

    private void OpenFollowersModal()
    {
        Task.Run(() =>
        {
            if (followers == null)
            {
                followers = eventDatabase.GetFollowerIds(PubKey);
                InvokeAsync(() => StateHasChanged());
            }
            UpdateSubscriptionForDetails();
        });
        followersModal?.Show();
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountDetailsChanged -= AccountDetailsChanged;
        accountService.AccountFollowsChanged -= AccountFollowsChanged;
        accountService.AccountFollowersChanged -= AccountFollowersChanged;
        relayService.DeleteFilters(feedFilter, followsFilter, followersFilter);
        relayService.DeleteFilters(followsDetailsFilter);
        if (followersFilter != null)
            accountService.UnregisterFollowerRequestFilter(followersFilter.Id);
    }
    #endregion
}
