@code{
    [Parameter]
    public string AccountId { get; set; }

    [Parameter]
    public bool CountFollowers { get; set; } /* If false then count follows */
}

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@implements IDisposable

@inject EventDatabase eventDatabase
@inject AccountService accountService

<span class="text-break">
    @(CountFollowers ? eventDatabase.GetFollowerCount(AccountId) : eventDatabase.GetFollowCount(AccountId))
</span>

@code
{
    private Task? updateAfterChange;
    private const int StateHasChangedAfterSeconds = 3;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        accountService.AccountFollowsChanged += AccountFollowsChanged;
        accountService.AccountFollowersChanged += AccountFollowersChanged;
    }

    private static object lockobj = new();

    private void AccountFollowsChanged(object? sender, (string accountId, List<string> follows) data)
    {
        if (_disposed)
            return;
        lock (lockobj)
        {
            if (updateAfterChange != null)
                return;
            updateAfterChange = Task.Delay(TimeSpan.FromSeconds(StateHasChangedAfterSeconds)).ContinueWith((_) =>
            {
                updateAfterChange = null;
                InvokeAsync(() => StateHasChanged());
            });
        }
    }

    private void AccountFollowersChanged(object? sender, string accountId)
    {
        if (_disposed)
            return;
        lock (lockobj)
        {
            if (updateAfterChange != null)
                return;
            updateAfterChange = Task.Delay(TimeSpan.FromSeconds(StateHasChangedAfterSeconds)).ContinueWith((_) =>
            {
                updateAfterChange = null;
                InvokeAsync(() => StateHasChanged());
            });
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountFollowsChanged -= AccountFollowsChanged;
        accountService.AccountFollowersChanged -= AccountFollowersChanged;
    }
    #endregion
}
