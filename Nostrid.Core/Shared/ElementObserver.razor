@implements IAsyncDisposable

@code{
    [Parameter, EditorRequired]
    public EventHandler<bool> OnIntersecting { get; set; } = null!;

    [Parameter]
    public string Margin { get; set; } = "0px";

    [CascadingParameter]
    public Scripts? Scripts { get; set; }
}

<div @ref="element" class="invisible"></div>

@code {
    private ElementReference element;
    private IJSObjectReference? observer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (Scripts != null && firstRender)
        {
            Scripts.InvokeAfterRender(async () =>
            {
                if (!_disposed)
                {
                    observer = await Scripts.InvokeAsync<IJSObjectReference>(
                        "createIntersectionObserver", element, DotNetObjectReference.Create(this), "Intersect", Margin);
                }
            });
        }
    }

    [JSInvokable]
    public void Intersect(bool intersecting)
    {
        this.OnIntersecting?.Invoke(this, intersecting);
    }

    #region Dispose
    private bool _disposed;

    async ValueTask IAsyncDisposable.DisposeAsync() => await Dispose(true);

    protected virtual async Task Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                if (observer != null)
                {
                    await observer.InvokeVoidAsync("dispose");
                    await observer.DisposeAsync();
                }
            }

            _disposed = true;
        }
    }
    #endregion
}