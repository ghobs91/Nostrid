@code{
    [Parameter, EditorRequired]
    public string Id { get; set; } = null!;

    [Parameter]
    public bool OnlyText { get; set; }
}

@implements IDisposable

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService

<span class="text-break">
    @if (details != null && details.Nip05Id.IsNotNullOrEmpty() && details.Nip05Valid &&
    Nip05.DecodeNip05(details.Nip05Id, out var domain, out var username))
    {
        if (username != "_")
        {
            @username
        }
        <span class="d-inline-block">
            @(username != "_" ? "@" : "")@domain
        </span>
        @if (!OnlyText)
        {
            <i class="text-success bi bi-patch-check-fill ms-1"></i>
        }
    }
    else if (Id != null)
    {
        @(details?.Name ?? ByteTools.PubkeyToNpub(Id, true))
    }
    @if (!OnlyText && (details?.Lud16Id ?? details?.Lud06Url).IsNotNullOrEmpty())
    {
        <i class="bi bi-lightning-charge-fill text-warning ms-1"></i>
    }
</span>

@code
{
    private AccountDetails? details;

    protected override void OnInitialized()
    {
        accountService.AccountDetailsChanged += AccountDetailsChanged;
    }

    protected override void OnParametersSet()
    {
        if (Id == null) return;
        accountService.AddDetailsNeeded(Id);
        details = accountService.GetAccountDetails(Id);
    }

    private void AccountDetailsChanged(object? sender, (string accountId, AccountDetails details) data)
    {
        if (data.accountId == Id)
        {
            details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
    }

    #region Dispose
    private bool disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountDetailsChanged -= AccountDetailsChanged;
    }
    #endregion
}