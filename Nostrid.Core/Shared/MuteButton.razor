@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@implements IDisposable

@inject EventDatabase eventDatabase
@inject AccountService accountService

@code {
    [Parameter, EditorRequired]
    public string AccountId { get; set; } = null!;

    [Parameter]
    public string? Css { get; set; }
}

@{
    var isMuting = accountService.IsMuting(AccountId); 
}
<button class="btn @Css @(isMuting ? "btn-primary" : "btn-danger")"
        @onclick="MuteUnmute" @onclick:stopPropagation="true">
    @(!isMuting ? "Mute" : "Unmute")
</button>

@confirmationModalRenderFragment

@code
{
    private RenderFragment? confirmationModalRenderFragment;
    private ConfirmationModal? confirmationModal;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        accountService.AccountMutesChanged += AccountMutesChanged;
    }

    private void AccountMutesChanged(object? sender, (string accountId, List<string> mutes) data)
    {
        if (_disposed)
            return;
        InvokeAsync(() => StateHasChanged());
    }

    private async Task MuteUnmute()
    {
        var mutePriv = accountService.IsMuting(AccountId, true);
        var mutePub = accountService.IsMuting(AccountId, false);
        if (mutePriv || mutePub) // If muted in any, unmute both
        {
            await accountService.MuteUnmute(AccountId, unmute:true);
        }
        else // If not muted then mute in private
        {
            await accountService.MuteUnmute(AccountId, unmute:false, priv:true);
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountMutesChanged -= AccountMutesChanged;
    }
    #endregion
}
