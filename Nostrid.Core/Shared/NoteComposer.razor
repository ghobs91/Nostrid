@implements IDisposable

@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Externals;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService
@inject FeedService feedService
@inject ConfigService configService
@inject MediaServiceProvider mediaServiceProvider

@code {
    [Parameter]
    public Event? ReplyTo { get; set; }

    [Parameter]
    public Action? OnSend { get; set; }
}

@if (accountService.MainAccount != null)
{
    @if (ReplyTo != null)
    {
        <div class="pb-2">
            <EventViewer Event="ReplyTo">
                <LeftPlaceholder>
                    <div class="flex-grow-1 d-flex flex-row note">
                        <div class="tree-placeholder-width-half"></div>
                        <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                    </div>
                </LeftPlaceholder>
            </EventViewer>
        </div>
    }
    <div class="d-flex flex-row flex-grow-1 align-items-start @(ReplyTo != null ? "pt-2" : "")">
        <a class="flex-shrink-0" href="/account/@accountService.MainAccount.Id">
            <AccountPicture Details="@accountService.MainAccount?.Details" Id="@accountService.MainAccount?.Id"></AccountPicture>
        </a>
        <div class="flex-grow-1 ms-2">
            <p class="mb-1">
                <a href="/account/@accountService?.MainAccount?.Id" class="fw-bold text-decoration-none mb-1">
                    <AccountName Details="@accountService?.MainAccount?.Details" Id="@accountService?.MainAccount?.Id" />
                </a>
            </p>
            <EditForm Model="@textInput" OnValidSubmit="@Send">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <textarea value="@textInput.Text" @oninput="@((args) => { textInput.Text = args.Value as string ?? string.Empty; })"
                      rows="4" style="resize: none;" class="form-control" placeholder="Leave a comment here" id="floatingTextarea" />
                @if (sending)
                {
                    <div class="d-flex flex-row align-items-center flex-wrap mt-2">
                        <button class="btn btn-secondary me-2" @onclick="@CancelPow">
                            <i class="bi bi-x"></i>
                            Cancel PoW
                        </button>
                        <span class="d-inline-block my-2">
                            <span>Sending with pow @configService.MainConfig.TargetDiffOutgoing.</span>
                            <span class="d-inline-block">If you leave this page it will be aborted.</span>
                        </span>
                    </div>
                }
                else
                {
                    <button disabled="@string.IsNullOrEmpty(textInput.Text)" type="submit" class="btn btn-primary mt-2">
                        @(ReplyTo != null ? "Reply" : "Send note")
                    </button>
                    @if (mediaServiceProvider.GetMediaServices().Count() > 0)
                    {
                        <div class="btn-group ms-2">
                            <label class="btn btn-outline-secondary mt-2">
                                Upload file <InputFile class="d-none" OnChange="@LoadFile" />
                            </label>
                            <button type="button" class="btn btn-outline-secondary mt-2 dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var service in mediaServiceProvider.GetMediaServices())
                                {
                                    <li><a role="button" class="dropdown-item @(selectedService == service ? "active" : "")" @onclick="@(() => selectedService = service)">@service.Name</a></li>
                                }
                            </ul>
                        </div>
                        @if (uploading)
                        {
                            <span>@uploadProgress% uploaded</span>
                        }
                        @if (uploadError.IsNotNullOrEmpty())
                        {
                            <span class="text-danger">@uploadError</span>
                        }
                    }
                }
            </EditForm>
        </div>
    </div>
}

@code {

    private TextInput textInput = new();
    private bool sending;
    private bool uploading;
    private CancellationTokenSource? powCancelSource;
    private IMediaService? selectedService;
    private int uploadProgress;
    private string? uploadError;

    private void CancelPow()
    {
        if (powCancelSource == null)
            return;

        powCancelSource.Cancel();
        powCancelSource = new();
        sending = false;
    }

    private void Send()
    {
        powCancelSource = new();
        if (!string.IsNullOrEmpty(textInput.Text))
        {
            var content = textInput.Text;
            textInput.Text = string.Empty;
            sending = true;
            feedService
                .SendNoteWithPow(content, ReplyTo, configService.MainConfig.TargetDiffOutgoing, powCancelSource.Token)
                .ContinueWith((_) =>
                {
                    OnSend?.Invoke();
                }, TaskContinuationOptions.OnlyOnRanToCompletion)
                .ContinueWith((_) =>
                {
                    powCancelSource = null;
                    sending = false;
                    InvokeAsync(() => StateHasChanged());
                });
        }
    }

    protected override void OnInitialized()
    {
        accountService.MainAccountChanged += MainAccountChanged;
        selectedService = mediaServiceProvider.GetMediaServices().FirstOrDefault();
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void SetUploadProgress(object? sender, float f)
    {
        uploadProgress = (int)(f * 100);
        InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (selectedService == null) return;

        try
        {
            uploading = true;
            uploadProgress = 0;
            uploadError = string.Empty;
            selectedService.UpdateProgress += SetUploadProgress;
            var file = e.File;
            using var stream = file.OpenReadStream(selectedService.MaxSize);
            using var memory = new MemoryStream();
            await stream.CopyToAsync(memory);
            memory.Position = 0;

            var uri = await selectedService.UploadFile(memory, file.Name, file.ContentType);
            if (uri != null)
            {
                textInput.Text += uri.ToString();
                uploadError = string.Empty;
            }
            else
            {
                uploadError = "Upload failed";
            }
        }
        catch (Exception ex)
        {
            uploadError = ex.Message;
        }
        finally
        {
            uploading = false;
            selectedService.UpdateProgress -= SetUploadProgress;
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                CancelPow();
                accountService.MainAccountChanged -= MainAccountChanged;
            }

            _disposed = true;
        }
    }
    #endregion
}
