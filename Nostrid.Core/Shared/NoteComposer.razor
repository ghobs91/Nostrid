@implements IDisposable

@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Externals;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService
@inject FeedService feedService
@inject ConfigService configService
@inject MediaServiceProvider mediaServiceProvider

@code {
    [Parameter]
    public Event? ReplyTo { get; set; }

    [Parameter]
    public string? ChannelId { get; set; }

    [Parameter]
    public int Rows { get; set; } = 4;

    [Parameter]
    public Action? OnSend { get; set; }

    [CascadingParameter]
    public Alert? Alert { get; set; }
}

@if (accountService.MainAccount != null)
{
    @if (ReplyTo != null)
    {
        <div class="pb-2">
            <EventViewer Event="ReplyTo">
                <LeftPlaceholder>
                    <div class="flex-grow-1 d-flex flex-row note">
                        <div class="tree-placeholder-width-half"></div>
                        <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                    </div>
                </LeftPlaceholder>
            </EventViewer>
        </div>
    }
    <div class="d-flex flex-row flex-grow-1 align-items-start @(ReplyTo != null ? "pt-2" : "")">
        <a class="flex-shrink-0" href="/account/@accountService.MainAccount.Id">
            <AccountPicture Id="@accountService.MainAccount?.Id"></AccountPicture>
        </a>
        <div class="flex-grow-1 ms-2">
            <p class="mb-1">
                <a href="/account/@accountService?.MainAccount?.Id" class="fw-bold text-decoration-none mb-1">
                    <AccountName Id="@accountService?.MainAccount?.Id" />
                </a>
            </p>
            <EditForm Model="@textInput" OnValidSubmit="@Send">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <textarea value="@textInput.Text" @oninput="@((args) => { textInput.Text = args.Value as string ?? string.Empty; })"
                      rows="@Rows" style="resize: none;" class="form-control" placeholder="Leave a comment here" id="floatingTextarea" />
                <div class="d-flex flex-row align-items-center flex-wrap mt-2" style="margin-bottom: -.5rem; margin-right: -.5rem;">
                    @if (sending)
                    {
                        <button class="btn btn-secondary me-2 mb-2" @onclick="@CancelPow">
                            <i class="bi bi-x"></i>
                            Cancel PoW
                        </button>
                        <span class="d-inline-block mb-2">
                            <span>Sending with pow @configService.MainConfig.TargetDiffOutgoing.</span>
                            <span class="d-inline-block">If you leave this page it will be aborted.</span>
                        </span>
                    }
                    else
                    {
                        <button disabled="@string.IsNullOrEmpty(textInput.Text)" type="submit" class="btn btn-primary me-2 mb-2">
                            @(
                        ReplyTo != null ? "Reply" : "Send note"
                        )
                        </button>
                        @if (mediaServiceProvider.GetMediaServices().Count() > 0)
                        {
                            <div class="btn-group me-2 mb-2">
                                <label class="btn btn-outline-secondary">
                                    Upload file <InputFile class="d-none" OnChange="@LoadFile" />
                                </label>
                                <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu">
                                    @foreach (var service in mediaServiceProvider.GetMediaServices())
                                    {
                                        <li><a role="button" class="dropdown-item @(selectedService == service ? "active" : "")" @onclick="@(() => selectedService = service)">@service.Name</a></li>
                                    }
                                </ul>
                            </div>
                            @foreach (var file in files)
                            {
                                <div class="me-2 mb-2 d-flex flex-row rounded border overflow-hidden" style="height: 33px"
                                        role="button" @onclick="@(() => InsertAttachmentUrl(file.Url))" @onclick:stopPropagation="true">
                                    @if (!string.IsNullOrEmpty(file.Url))
                                    {
                                        <img style="max-height: 36px; max-width: 36px; object-fit: cover;" src="@file.Url">
                                    }
                                    <div class="d-flex flex-column px-2 align-self-center">
                                        <div class="d-flex flex-row">
                                            <span class="flex-grow-1 me-2 fs-7 overflow-hidden"
                                                   style="max-width: 150px; white-space:nowrap; text-overflow: ellipsis;">
                                                @file.Name
                                            </span>
                                            <span class="fw-bold fs-7">@file.Progress%</span>
                                        </div>
                                        <div class="progress" style="height: 0.3rem;" role="progressbar" aria-valuenow="@file.Progress" aria-valuemin="0" aria-valuemax="100">
                                            <div class="progress-bar" style="width: @file.Progress%"></div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
            </EditForm>
        </div>
    </div>
}

@code {

    private TextInput textInput = new();
    private bool sending;
    private CancellationTokenSource? powCancelSource;

    private IMediaService? selectedService;
    private List<Attachment> files = new();

    private class Attachment
    {
        public Attachment(string name)
        {
            Name = name;
        }

        public string Name { get; set; }
        public int Progress { get; set; }
        public string? Url { get; set; }
    }

    private void CancelPow()
    {
        if (powCancelSource == null)
            return;

        powCancelSource.Cancel();
        powCancelSource = new();
        sending = false;
    }

    private void Send()
    {
        powCancelSource = new();
        if (!string.IsNullOrEmpty(textInput.Text))
        {
            var mentions = ReplyTo?.GetMentions().Where(m => m.Type == 'p').Select(m => m.MentionId).Union(new[] { ReplyTo.PublicKey });
            var content = textInput.Text;

            textInput.Text = string.Empty;

            Task sendTask;
            if (!string.IsNullOrEmpty(ChannelId))
            {
                sendTask = feedService.SendNoteWithPow(content, true, ReplyTo?.Id, ChannelId, mentions, configService.MainConfig.TargetDiffOutgoing, powCancelSource.Token);
            }
            else
            {
                sendTask = feedService.SendNoteWithPow(content, false, ReplyTo?.Id, ReplyTo?.ReplyToRootId, mentions, configService.MainConfig.TargetDiffOutgoing, powCancelSource.Token);
            }

            files.Clear();
            sending = true;
            sendTask
                .ContinueWith((_) =>
                {
                    OnSend?.Invoke();
                }, TaskContinuationOptions.OnlyOnRanToCompletion)
                .ContinueWith((_) =>
                {
                    powCancelSource = null;
                    sending = false;
                    InvokeAsync(() => StateHasChanged());
                });
        }
    }

    protected override void OnInitialized()
    {
        accountService.MainAccountChanged += MainAccountChanged;
        selectedService = mediaServiceProvider.GetMediaServices().FirstOrDefault();
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (selectedService == null) return;
        var attachment = new Attachment(e.File.Name);

        try
        {
            var file = e.File;
            files.Add(attachment);

            using var stream = file.OpenReadStream(selectedService.MaxSize);
            using var memory = new MemoryStream();
            await stream.CopyToAsync(memory);
            memory.Position = 0;

            var uri = await selectedService.UploadFile(memory, file.Name, file.ContentType, (progress) => SetUploadProgress(attachment, progress));
            if (uri != null)
            {
                attachment.Url = uri.ToString();
                InsertAttachmentUrl(attachment.Url);
            }
            else
            {
                files.Remove(attachment);
                Alert?.Show("Upload failed", Alert.Type.Danger);
            }
        }
        catch (Exception ex)
        {
            files.Remove(attachment);
            Alert?.Show(ex.Message, Alert.Type.Danger);
        }
    }

    private void SetUploadProgress(Attachment attachment, float f)
    {
        attachment.Progress = (int)(f * 100);
        InvokeAsync(() => StateHasChanged());
    }

    private void InsertAttachmentUrl(string? url)
    {
        if (string.IsNullOrEmpty(url)) return;
        textInput.Text += (!string.IsNullOrEmpty(textInput.Text) ? "\n" : string.Empty) + url;
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                CancelPow();
                accountService.MainAccountChanged -= MainAccountChanged;
            }

            _disposed = true;
        }
    }
    #endregion
}
