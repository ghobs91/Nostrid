@code{
    [Parameter, EditorRequired]
    public string Id { get; set; } = null!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }
}

@implements IDisposable

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService _accountService

@if (_details != null && (_details.Lud06Url.IsNotNullOrEmpty() || _details.Lud16Id.IsNotNullOrEmpty()))
{
    @ChildContent
}

@code
{
    private AccountDetails? _details;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _details = _accountService.GetAccountDetails(Id);
        _accountService.AccountDetailsChanged += AccountDetailsChanged;
    }

    private void AccountDetailsChanged(object? sender, (string accountId, AccountDetails details) data)
    {
        if (data.accountId == Id)
        {
            _details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        _accountService.AccountDetailsChanged -= AccountDetailsChanged;
    }
    #endregion
}