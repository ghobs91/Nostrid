@code {
    [Parameter, EditorRequired]
    public string Id { get; set; } = null!;

    [Parameter]
    public int Size { get; set; } = 48;
}

@implements IDisposable

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject ChannelService _channelService

@if (_details != null && _details.PictureUrl.IsNotNullOrEmpty() && Uri.IsWellFormedUriString(_details.PictureUrl, UriKind.Absolute))
{
    <img style="width:@(Size)px; height:@(Size)px" src="@_details.PictureUrl" class="card-img-top rounded-999" alt="">
}
else if (Id.IsNotNullOrEmpty())
{
    <div style="width:@(Size)px; height:@(Size)px" class="rounded-999 overflow-hidden">
        @((MarkupString)Utils.ToSvgIdenticon(Id, Size))
    </div>
}

@code
{
    private ChannelDetails? _details;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _details = _channelService.GetChannel(Id)?.Details;
        _channelService.ChannelDetailsChanged += ChannelDetailsChanged;
    }

    private void ChannelDetailsChanged(object? sender, (string channelId, ChannelDetails details) data)
    {
        if (data.channelId == Id)
        {
            _details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        _channelService.ChannelDetailsChanged -= ChannelDetailsChanged;
    }
    #endregion
}