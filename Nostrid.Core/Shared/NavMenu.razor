@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;

@inject RelayService relayService
@inject FeedService feedService
@inject EventDatabase eventDatabase
@inject AccountService accountService
@inject NotificationService notificationService
@inject IJSRuntime jsRuntime
@implements IDisposable

@code
{
	[Parameter]
	public RenderFragment? ChildContent { get; set; }
}

<div class="d-flex flex-row flex-grow-1">

	<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
		<div class="offcanvas-header d-md-none">
			<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
		</div>
		<div class="offcanvas-body d-flex flex-column flex-grow-1">
			<a class="d-block pb-3 text-center text-decoration-none" href="/">Nostrid</a>
			<nav class="p-0 flex-grow-1 fs-5" style="min-width: 150px;">
				<ul class="nav nav-pills flex-column">
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap" href="/" Match="NavLinkMatch.All" @onclick="HideOffCanvasMenu">
							<span class="bi bi-house-fill" aria-hidden="true"></span> Global
						</NavLink>
					</li>
					<UpdatabableElement @ref="@loggedInElements">
						@if (accountService.MainAccount != null)
						{
							@foreach (var feedSource in feedService.GetFeedSources(accountService.MainAccount.Id))
							{
								<li class="nav-item pb-2">
									<NavLink class="nav-link text-nowrap" href="@($"feed/{feedSource.Id}")" @onclick="HideOffCanvasMenu">
										<span class="bi bi-house-heart-fill" aria-hidden="true"></span> @string.Join(", ", feedSource.Hashtags.ToArray())
									</NavLink>
								</li>
							}
							<li class="nav-item pb-2">
								<NavLink class="nav-link text-nowrap" href="feed/follow" @onclick="HideOffCanvasMenu">
									<span class="bi bi-house-check-fill" aria-hidden="true"></span> Following
								</NavLink>
							</li>
							<li class="nav-item pb-2">
								<NavLink class="nav-link text-nowrap" href="feed/mention" @onclick="HideOffCanvasMenu">
									<span class="bi bi-house-exclamation-fill" aria-hidden="true"></span> Mentions
									<UpdatabableElement @ref="mentionsElement2">
										@if (mentionsCount > 0)
										{
											<span style="font-size:0.6rem;" class="badge rounded-pill bg-danger">
												@mentionsCount
											</span>
										}
									</UpdatabableElement>
								</NavLink>
							</li>
							<li class="nav-item pb-2">
								<NavLink class="nav-link text-nowrap" href="dms" @onclick="HideOffCanvasMenu">
									<span class="bi bi-chat-quote-fill" aria-hidden="true"></span> Messages
								</NavLink>
							</li>
						}
					</UpdatabableElement>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap" href="explore" @onclick="HideOffCanvasMenu">
							<span class="bi bi-search" aria-hidden="true"></span> Explore
						</NavLink>
					</li>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap" href="channels" @onclick="HideOffCanvasMenu">
							<span class="bi bi-tv-fill" aria-hidden="true"></span> Channels
						</NavLink>
					</li>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap" href="config" @onclick="HideOffCanvasMenu">
							<span class="bi bi-gear" aria-hidden="true"></span> Settings
						</NavLink>
					</li>
					<UpdatabableElement @ref="loggedInElements2">
						@if (accountService.MainAccount != null)
						{
							<li class="nav-item pb-2">
								<NavLink class="nav-link text-nowrap" href="@($"account/{accountService.MainAccount.Id}")" @onclick="HideOffCanvasMenu">
									<span class="bi bi-person-fill" aria-hidden="true"></span> Me
								</NavLink>
							</li>
						}
					</UpdatabableElement>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap" href="accounts" @onclick="HideOffCanvasMenu">
							<span class="bi bi-people-fill" aria-hidden="true"></span> Accounts
						</NavLink>
					</li>
				</ul>
			</nav>
			<div class="fs-7 text-muted text-left">
				<div>
					<UpdatabableElement @ref="relayElements">
						Relays
						@if (relayService.RelaysMonitor.IsAuto)
						{
							<span> (Auto)</span>
						}
						<br />
						-Connected: @relayService.ConnectedRelays/@relayService.RelaysMonitor.MaxRelays
						@if (!relayService.IsRestarting)
						{
							<button class="btn btn-sm btn-outline-secondary py-0 px-1" @onclick="@ChangeRelays"><i class="bi bi-arrow-clockwise"></i></button>
						}
						<br />
						-Available: @relayService.RelaysMonitor.PendingRelays <br />
						-Rate Limited: @relayService.RateLimitedRelays <br />
						Filters: @relayService.FiltersCount <br />
						Version: @Utils.GetCurrentVersion()
					</UpdatabableElement>
				</div>
			</div>
		</div>
	</div>

	<div class="d-flex flex-column flex-grow-1">
		
		<nav class="navbar navbar-light bg-body-tertiary d-md-none m-0 px-2 py-1 border-bottom bg-opacity-95">
			<div class="flex-grow-1 d-flex flex-row justify-content-between align-items-center">
				<NavLink class="nav-link" href="#">
					<UpdatabableElement @ref="loggedInElements3">
						<AccountPicture Id="@accountService.MainAccount?.Id" Size="35"></AccountPicture>
					</UpdatabableElement>
				</NavLink>
				<div class="flex-grow-1 text-center">
					<a class="navbar-brand m-0" href="/">Nostrid</a>
				</div>
				<button title="Navigation menu" class="position-relative navbar-toggler p-1 m-0" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu" style="margin: 12px 0;">
					<span class="navbar-toggler-icon"></span>
					<UpdatabableElement @ref="mentionsElement">
						@if (mentionsCount > 0)
						{
							<span style="font-size:0.6rem;" class="position-absolute top-100 start-0 translate-middle badge rounded-pill bg-danger">
								@mentionsCount
							</span>
						}
					</UpdatabableElement>
				</button>
			</div>
		</nav>

		<div class="position-relative d-flex flex-column flex-grow-1 overflow-y-auto">
			@ChildContent
		</div>

		<nav class="navbar navbar-light bg-body-tertiary d-md-none p-0 m-0 border-top">
			<ul class="nav flex-grow-1 d-flex text-center">
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="/" Match="NavLinkMatch.All">
						<span class="bi bi-house-fill" aria-hidden="true"></span>
					</NavLink>
				</li>
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="compose">
						<div class="bi bi-chat-dots-fill" aria-hidden="true"></div>
					</NavLink>
				</li>
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="explore">
						<div class="bi bi-search" aria-hidden="true"></div>
					</NavLink>
				</li>
			</ul>
		</nav>

	</div>
</div>

<Scripts @ref="scripts" />

@code {

	private int mentionsCount;
	private Scripts? scripts;
	private UpdatabableElement? mentionsElement, mentionsElement2, loggedInElements, loggedInElements2, loggedInElements3, relayElements;

	private void NotificationNumberChanged(object? sender, int mentionsCount)
	{
		this.mentionsCount = mentionsCount;
		mentionsElement?.Update();
		mentionsElement2?.Update();
	}

	private void MainAccountChanged(object? sender, EventArgs args)
	{
		loggedInElements?.Update();
		loggedInElements2?.Update();
		loggedInElements3?.Update();
	}

	private void ClientStatusChanged(object? sender, (long, bool) data)
	{
		relayElements?.Update();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		notificationService.NotificationNumberChanged += NotificationNumberChanged;
		accountService.MainAccountChanged += MainAccountChanged;
		relayService.ClientStatusChanged += ClientStatusChanged;
	}

	private void ChangeRelays()
	{
		Task.Run(() => relayService.RestartNostrClients());
	}

	private async Task HideOffCanvasMenu()
	{
		if (scripts != null)
		{
			await scripts.InvokeVoidAsync("hideOffcanvasMenu");
		}
	}

	#region Dispose
	private bool _disposed;

	public void Dispose() => Dispose(true);

	protected virtual void Dispose(bool disposing)
	{
		if (!_disposed)
		{
			if (disposing)
			{
				Cleanup();
			}

			_disposed = true;
		}
	}

	private void Cleanup()
	{
		notificationService.NotificationNumberChanged -= NotificationNumberChanged;
		accountService.MainAccountChanged -= MainAccountChanged;
		relayService.ClientStatusChanged -= ClientStatusChanged;
	}
	#endregion
}
