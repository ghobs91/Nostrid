@implements IAsyncDisposable

@using Markdig;
@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Interfaces;
@using Nostrid.Misc;
@using Nostrid.Model;
@using Ganss.Xss;
@using System.Web;
@using System.Net;

@inject NavigationManager navigationManager
@inject AccountService accountService
@inject FeedService feedService
@inject IJSRuntime jsRuntime
@inject ConfigService configService
@inject IClipboardService clipboardService

@code{
    [Parameter, EditorRequired]
    public NoteTree Tree { get; set; } = null!;

    [Parameter, EditorRequired]
    public string MainEventId { get; set; } = null!;

    [Parameter, EditorRequired]
    public int[] TreeLayout { get; set; } = null!;

    [Parameter]
    public bool OnlyChild { get; set; }

    [Parameter]
    public Action<NoteViewer>? OnComponentLoad { get; set; }

    [Parameter]
    public Action<NoteViewer>? OnComponentUnload { get; set; }

    [Parameter]
    public Action<Event>? OnReply { get; set; }

    [Parameter]
    public Action<Event>? OnRepost { get; set; }

    [Parameter]
    public Action<string>? OnPay { get; set; }

    [Parameter]
    public Action<Event>? OnDelete { get; set; }

    [Parameter]
    public int ChildIndex { get; set; }
}

<div role="button" @ref="referenceElement" class="note d-flex flex-row px-2 px-lg-3 py-2 bg-tertiary-hover border-top @(Tree.Note.Id == MainEventId ? "bg-body-secondary" : "")"
     @onclick="@(() => navigationManager.NavigateTo($"/note/{Tree.Note.Id}"))" style="margin: 0 -1rem;">

    @for (var i = 1; i < TreeLayout.Length; i++)
    {
        var last = i == TreeLayout.Length - 1;
        <div class="flex-shrink-0 d-flex flex-row">
            <div class="tree-placeholder-width-half"></div>
            @if (TreeLayout[i] > 1)
            {
                <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
            }
            else if (!OnlyChild && TreeLayout[i] == 1 && last)
            {
                <div class="bg-secondary opacity-75 tree-line-width tree-placeholder-height-half"></div>
            }
            else
            {
                <div class="tree-line-width"></div>
            }
            <div class="d-flex flex-column justify-content-center tree-placeholder-height tree-placeholder-width-last">
                @if (!OnlyChild && last)
                {
                    <div class="bg-secondary opacity-75 tree-line-height"></div>
                }
            </div>
        </div>
    }
    @if (Tree.Note.Deleted)
    {
        <div class="d-flex flex-grow-1 align-items-center justify-content-center text-secondary">Note deleted</div>
    }
    else
    {
        <div class="d-flex flex-grow-1 flex-column">
            <EventViewer Event="@Tree.Note" ShowReplyingTo="@(TreeLayout.Length == 1 && !OnlyChild)">
                <LeftPlaceholder>
                    @if (Tree.Children.Count > 0)
                    {
                        <div class="flex-grow-1 d-flex flex-row">
                            <div class="tree-placeholder-width-half"></div>
                            <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                        </div>
                    }
                </LeftPlaceholder>
                <BottomPlaceholder>
                    <div class="w-100 mt-1" style="margin-right:-1.5rem;">
                        @{
                            var reactions = feedService.GetReactionGroups(Tree.Note.Id);
                            if (reactions.Count > 0)
                            {
                                var groupedReactions = reactions.OrderByDescending(r => r.Count);
                                @foreach (var reaction in groupedReactions.Take(3))
                                {
                                    <span class="py-2 me-4">
                                        <span class="d-inline-block">
                                            <a role="button" @onclick="@(() => {})" @onclick:stopPropagation="true" class="d-flex align-items-center justify-content-center rounded-5 fs-6 text-secondary text-decoration-none" style="width:32px;height:32px;">
                                                @NormalizedReaction(reaction.Reaction)
                                            </a>
                                        </span><span class="fs-7 fw-bold">@reaction.Count</span>
                                    </span>
                                }
                                var remainingReactionCount = groupedReactions.Skip(3).Sum(reaction => reaction.Count);
                                if (remainingReactionCount > 0)
                                {
                                    <span class="py-2 me-4">
                                        <span class="d-inline-block">
                                            <a role="button" @onclick="@(() => {})" @onclick:stopPropagation="true" class="d-flex align-items-center justify-content-center rounded-5 fs-6 text-secondary text-decoration-none" style="width:32px;height:32px;">
                                                <i class="bi bi-three-dots"></i>
                                            </a>
                                        </span><span class="fs-7 fw-bold">@remainingReactionCount</span>
                                    </span>
                                }
                            }
                        }
                        <div class="d-inline-block">
                            @if (accountService.MainAccount != null)
                            {
                                <a role="button" @onclick="Reply" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                    <i class="bi bi-chat"></i>
                                </a>
                                <a role="button" @onclick="@Repost" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                    <i class="bi bi-repeat"></i>
                                </a>
                                <a role="button" @onclick="@LikeNote" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 @(!likeSent ? "bg-primary-opacity-10-hover" : "")">
                                    <i class="bi @(!likeSent ? "bi-heart" : "bi-heart-fill")"></i>
                                </a>
                                @if (Tree.Note.PublicKey == accountService.MainAccount.Id)
                                {
                                    <a role="button" @onclick="@Delete" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                        <i class="bi bi-trash3"></i>
                                    </a>
                                }
                            }
                            <PayButton Id="@Tree.Note.PublicKey" OnClick="@Pay" />
                            <a role="button" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-three-dots-vertical"></i>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNote(Tree.Note.Id ?? string.Empty)))" @onclick:stopPropagation="true">Copy Note ID</a></li>
                                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.Id ?? string.Empty))" @onclick:stopPropagation="true">Copy Note Hex</a></li>
                                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNpub(Tree.Note.PublicKey ?? string.Empty)))" @onclick:stopPropagation="true">Copy Account Npub</a></li>
                                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.PublicKey ?? string.Empty))" @onclick:stopPropagation="true">Copy Account Hex</a></li>
                                <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.Content ?? string.Empty))" @onclick:stopPropagation="true">Copy Content</a></li>
                            </ul>
                        </div>
                    </div>
                </BottomPlaceholder>
            </EventViewer>
        </div>
    }
</div>

@if (Tree.Children.Count > 0)
{
    List<NoteTreeNode> visiblePortion = new();

    if (TreeLayout.Length == MaxNestingLevel)
    {
        visiblePortion.Add(new NoteTreeShowMore(0, true, Tree.Note.Id));
    }
    else
    {
        if (ChildIndex > 0)
        {
            visiblePortion.Add(new NoteTreeShowMore(Math.Max(ChildIndex - MaxChildren, 0), true, Tree.Note.Id));
        }
        var skippedPortion = Tree.Children.Skip(ChildIndex);
        visiblePortion.AddRange(skippedPortion.Take(MaxChildren));
        if (skippedPortion.Skip(MaxChildren).Any())
        {
            visiblePortion.Add(new NoteTreeShowMore(ChildIndex + MaxChildren, false, Tree.Note.Id));
        }
    }

    <NoteTreeViewer @ref="NoteTreeViewerRef"
                    Trees="@visiblePortion" Root="false" NewestOnTop="false" MainEventId="@MainEventId"
                    TreeLayout="@TreeLayout" OnlyChild="@(visiblePortion.Count == 1)"
                    OnReply="@OnReply" OnRepost="@OnRepost" OnPay="@OnPay" OnDelete="@OnDelete"/>

}

@code {
    private bool likeClicked = false;
    private bool likeSent => likeClicked || (accountService.MainAccount != null ? feedService.AccountReacted(Tree.Note.Id, accountService.MainAccount.Id) : false);
    private bool showDifficulty => configService.MainConfig.ShowDifficulty;
    private IJSObjectReference? jsModule;
    private ElementReference? referenceElement;
    private NoteTreeViewer? NoteTreeViewerRef;

    public const int MaxNestingLevel = 4;

    private const int MaxChildren = 5;


    protected override void OnInitialized()
    {
        feedService.NoteUpdated += NoteUpdated;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && OnComponentLoad != null)
        {
            OnComponentLoad(this);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firtRender)
    {
        if (firtRender)
        {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "../NoteViewer.js");
        }
    }

    private void Reply()
    {
        OnReply?.Invoke(Tree.Note);
    }

    private void Repost()
    {
        OnRepost?.Invoke(Tree.Note);
    }

    private async Task LikeNote()
    {
        if (likeSent) return;
        await feedService.SendReaction("+", Tree.Note);
        likeClicked = true;
    }

    private void Pay()
    {
        OnPay?.Invoke(Tree.Note.PublicKey);
    }

    private void Delete()
    {
        OnDelete?.Invoke(Tree.Note);
    }

    private string NormalizedReaction(string reaction)
    {
        if (string.IsNullOrEmpty(reaction) || reaction == "+")
        {
            return "❤️";
        }
        else
        {
            return reaction;
        }
    }

    public async Task<bool> IsVisibleAsync()
    {
        return jsModule != null
            ? await jsModule.InvokeAsync<bool>("isVisible", referenceElement)
            : false;
    }

    public IEnumerable<NoteViewer> GetNoteViewers()
    {
        return (new NoteViewer[] { this }).Concat(NoteTreeViewerRef?.GetNoteViewers() ?? Enumerable.Empty<NoteViewer>());
    }

    private void NoteUpdated(object? sender, Event ev)
    {
        if (Tree.Note.Id != ev.Id)
            return;

        Tree.Note.Deleted = ev.Deleted; // For now only the deleted status can be updated (reactions are loaded on the fly)
        InvokeAsync(() => StateHasChanged());
    }

    #region Dispose
    private bool _disposed;

    async ValueTask IAsyncDisposable.DisposeAsync() => await Dispose(true);

    protected virtual async Task Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                await Cleanup();
            }

            _disposed = true;
        }
    }

    private async Task Cleanup()
    {
        if (OnComponentUnload != null)
        {
            OnComponentUnload(this);
        }
        feedService.NoteUpdated -= NoteUpdated;
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }
    #endregion
}
