@using Microsoft.Extensions.Logging;
@using Nostrid.Data;
@using Nostrid.Model;
@using Nostrid.Pages;
@using System.Diagnostics;

@inject AccountService accountService
@inject ConfigService configService
@inject LocalSignerFactory localSignerFactory
@inject ILogger<MainLayout> logger

@inherits LayoutComponentBase

<CustomErrorBoundary OnError="OnError">
	<CascadingValue Value="@scripts">
		<CascadingValue Value="@alert">
			<NavMenu>
				<main class="d-flex flex-column flex-grow-1 p-3">
					@Body
				</main>
			</NavMenu>
		</CascadingValue>
	</CascadingValue>
</CustomErrorBoundary>

<Alert @ref="alert"></Alert>
<Scripts @ref="scripts" />

@code{
	private Scripts? scripts;
	private Alert? alert;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (!string.IsNullOrEmpty(configService.MainConfig.MainAccountId))
		{
			var account = accountService.GetAccount(configService.MainConfig.MainAccountId);

			if (accountService.HasSigner(account.Id))
			{
				accountService.SetMainAccount(account);
			}
			else if (localSignerFactory.TryFromPrivKey(account.PrivKey, out var signer))
			{
				accountService.SetMainAccount(account, signer);
			}
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (scripts != null && firstRender)
		{
			scripts.InvokeAfterRender(async () =>
			{
				await scripts.InvokeVoidAsync("setTheme", configService.MainConfig.Theme ?? ConfigPage.DARK_THEME);
			});
		}
	}

	private void OnError(Exception e)
	{
		alert?.Show("An unhandled error has occurred. Click <a class='text-bg-danger' href='/'>here</a> to reload the application.", Alert.Type.Danger);
		#if DEBUG
		scripts?.JSRuntime?.InvokeVoidAsync("console.error", e.ToString());
		#endif
	}
}