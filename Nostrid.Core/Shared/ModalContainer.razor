@implements IAsyncDisposable

@code {
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = null!;
}

<div @ref="container">
	@ChildContent
</div>

<Scripts @ref="scripts" />

@code {

    private Scripts? scripts;
    private ElementReference container;

    public void Show()
    {
        scripts?.InvokeVoid("showModal", container);
    }

    public void Hide()
    {
        scripts?.InvokeVoid("hideModal", container);
    }

    public bool IsVisible()
    {
        return scripts?.Invoke<bool>("isModalShown", container) ?? false;
    }

    #region Dispose
    private bool _disposed;

    async ValueTask IAsyncDisposable.DisposeAsync() => await Dispose(true);

    protected virtual async Task Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                if (scripts is not null)
                {
                    await scripts.InvokeVoidAsync("hideModal", container);
                }
            }

            _disposed = true;
        }
    }
    #endregion
}
