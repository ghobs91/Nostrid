@code {
    [Parameter, EditorRequired]
    public string Id { get; set; } = null!;
}

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject ChannelService _channelService

@_messageCount

@code
{
    private int _messageCount = 0;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _messageCount = _channelService.GetChannelMessagesInDb(Id);
        _channelService.ChannelReceivedMessage += ChannelReceivedMessage;
    }

    private void ChannelReceivedMessage(object? sender, string channelId)
    {
        if (channelId == Id)
        {
            _messageCount = _channelService.GetChannelMessagesInDb(channelId);
            InvokeAsync(() => StateHasChanged());
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        _channelService.ChannelReceivedMessage -= ChannelReceivedMessage;
    }
    #endregion
}