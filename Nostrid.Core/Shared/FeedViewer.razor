@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService
@inject AccountService accountService
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public SubscriptionFilter BaseFilter { get; set; } = null!;

    [Parameter, EditorRequired]
    public int[] MessageKinds { get; set; }

    [Parameter]
    public bool ShowAsMessages { get; set; }

    [Parameter]
    public Action<IEnumerable<NoteTree>>? OnLoaded { get; set; }
}

<div @ref="container"
     class="px-3 d-flex flex-column flex-grow-1 @(ShowAsMessages ? "position-relative flex-column-reverse overflow-y-auto" : "")"
     style="margin: 0 -1rem -1rem -1rem; flex-basis: 0;">
     
    <NoteTreeViewer @ref="noteTreeViewer" Trees="@renderedN" ShowAsMessage="@ShowAsMessages" />
    
    <div class="text-center px-3 py-2" style="margin: 0 -1rem;">
        <UpdatabableElement @ref="@labelLoadMore">
            @if (loading)
            {
                <div class="spinner-border mx-3 my-2" role="status">
                    <span class="visually-hidden">Waiting for feed...</span>
                </div>
            } 
            else if (moreResults)
            {
                <ElementObserver OnIntersecting="@LoadMoreIntersecting" Margin="300px" />
            }
        </UpdatabableElement>
    </div>

    <div class="position-absolute" style="height: 40px; width: 40px; @(!ShowAsMessages ? "bottom" : "top"): 1.5rem; right: 1.5rem;">
        <UpdatabableElement @ref="@buttonLoadMoreFromNote">
            <div class="position-fixed">
                <button type="button" @onclick="@(async () => await LoadMoreFromNoteAsync())" disabled="@(requestDisabled && newN.Count == 0)"
                        class="position-relative btn btn-secondary rounded-5 shadow fs-4">
                    <i class="bi bi-arrow-repeat"></i>
                    @if (newN.Count > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle fs-8 bg-primary border rounded-circle d-flex align-items-center justify-content-center"
                              style="width: 20px; height: 20px;">
                            @(newN.Count > 99 ? "99+" : newN.Count)
                            <span class="visually-hidden">New alerts</span>
                        </span>
                    }
                </button>
            </div>
        </UpdatabableElement>
    </div>

</div>

@code {
    private ConcurrentDictionary<string, bool> receivedIds = new();
    private List<NoteTree> renderedN = new(), newN = new();
    private int dbLimit;
    private SubscriptionFilter? newFilter, oldFilter;
    private NoteTreeViewer? noteTreeViewer;
    private bool requestDisabled;
    private UpdatabableElement? labelLoadMore, buttonLoadMoreFromNote;
    private ElementReference? container;
    private static object lockobj = new();
    private bool loading = false;
    private bool moreResults = false;

    private DateTime lastUpdate;
    private Task? updateTask;
    private CancellationTokenSource cancellationTokenSource = new();

    private const int InitialRenderInSeconds = 2;
    private const int MinSecondsBetweenUpdates = 3;
    private const int RelayQueryLimit = 13;
    private const int SecondsForDetailsFilters = 30;

    private void ShowNewPosts()
    {
        lock (lockobj)
        {
            EventExtension.Merge(renderedN, newN.AllNotes());
            newN.Clear();
            TrimOlder();
        }
    }

    private void LoadMoreIntersecting(object? sender, bool intersecting)
    {
        if (intersecting)
        {
            LoadMore();
        }
    }

    private void LoadMore()
    {
        lock (lockobj)
        {
            if (loading) return;
            loading = true;
        }
        labelLoadMore?.Update();

        Task.Run(() =>
        {
            dbLimit += RelayQueryLimit;
            var prevRenderedN = renderedN.Count;
            EventExtension.Merge(renderedN, feedService.GetNotesFeed(BaseFilter, dbLimit, MessageKinds));
            loading = false;
            moreResults = renderedN.Count > prevRenderedN;
            OnLoaded?.Invoke(renderedN);
            InvokeAsync(() => StateHasChanged());
        });
    }

    private async Task LoadMoreFromNoteAsync()
    {
        if (newN.Count > 0)
        {
            ShowNewPosts();
            return;
        }

        if (noteTreeViewer == null)
        {
            return;
        }
        var treeItem = await noteTreeViewer.GetFirstVisibleAsync();
        if (treeItem == null)
        {
            return;
        }

        oldFilter.LimitFilterData.Until = DateTimeOffset.FromUnixTimeSeconds(treeItem.Tree.Note.CreatedAtCurated);
        relayService.RefreshFilters(oldFilter);

        requestDisabled = true;

        _ = Task.Delay(5000).ContinueWith((_) =>
        {
            requestDisabled = false;
            buttonLoadMoreFromNote?.Update();
        });
    }

    private void ReceivedNotes(IEnumerable<Event> notes)
    {
        if (_disposed)
        {
            return;
        }

        notes = notes.Where(n => MessageKinds.Contains(n.Kind) && receivedIds.TryAdd(n.Id, true)).ToList();
        if (!notes.Any())
        {
            return;
        }

        bool added = false;
        if (ShowAsMessages)
        {
            lock (lockobj)
            {
                if (EventExtension.Merge(renderedN, notes))
                {
                    added = true;
                    TrimOlder();
                }
            }
            if (added)
            {
                UpdateIfNeeded();
            }
        }
        else
        {
            lock (lockobj)
            {
                added = EventExtension.Merge(newN, notes);
            }
            if (added)
            {
                buttonLoadMoreFromNote?.Update();
            }
        }
    }

    protected override void OnParametersSet()
    {
        Cleanup();

        cancellationTokenSource = new();

        renderedN = new();
        newN = new();
        receivedIds = new();

        newFilter = BaseFilter.Clone();
        newFilter.Handler = ReceivedNotes;
        oldFilter = BaseFilter.Clone();
        oldFilter.Handler = ReceivedNotes;
        oldFilter.LimitFilterData.Limit = RelayQueryLimit;
        oldFilter.LimitFilterData.Until = DateTimeOffset.UtcNow;
        newFilter.LimitFilterData.Limit = 1;
        dbLimit = 0;

        relayService.AddFilters(newFilter, oldFilter);

        LoadMore();

        Task.Delay(TimeSpan.FromSeconds(InitialRenderInSeconds)).ContinueWith((_) =>
        {
            if (renderedN.Count == 0)
            {
                LoadMore();
            }
        });
    }

    private void TrimOlder()
    {
        if (renderedN == null || renderedN.Count <= dbLimit)
        {
            return;
        }
        renderedN.RemoveRange(dbLimit, renderedN.Count - dbLimit);
    }

    private void UpdateIfNeeded()
    {
        if (updateTask != null)
        {
            return;
        }
        var waitFor = Math.Min(Math.Max((lastUpdate.AddSeconds(MinSecondsBetweenUpdates) - DateTime.UtcNow).TotalSeconds, 0), MinSecondsBetweenUpdates);
        updateTask = Task.Delay(TimeSpan.FromSeconds(waitFor), cancellationTokenSource.Token).ContinueWith((_) =>
        {
            lastUpdate = DateTime.UtcNow;
            InvokeAsync(() => StateHasChanged());
            updateTask = null;
        }, cancellationTokenSource.Token);
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        relayService.DeleteFilters(newFilter, oldFilter);
        cancellationTokenSource.Cancel();
    }
    #endregion

}
