@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService
@inject AccountService accountService
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public SubscriptionFilter BaseFilter { get; set; } = null!;

    [Parameter, EditorRequired]
    public int[] MessageKinds { get; set; }
}

@if (newN.Count > 0)
{
    <div class="text-center border-top px-3" style="margin: 0 -1rem;">
        <button class="btn btn-link btn-sm mx-3 my-2" type="button" @onclick="ShowNewPosts">Show @newN.Count new posts</button>
    </div>
}

@if (renderedN.Count == 0)
{
    <div class="text-center px-3 py-2 border-top" style="margin: 0 -1rem;">
        <div class="spinner-border mx-3 my-2" role="status">
            <span class="visually-hidden">Waiting for feed...</span>
        </div>
    </div>
}
else
{
    <NoteTreeViewer @ref="noteTreeViewer" Trees="@feedService.GetTreesFromNotes(renderedN.Values)" NewestOnTop="true" />
    <div class="text-center border-top px-3" style="margin: 0 -1rem -1rem -1rem;">
        <button class="btn btn-link btn-sm mx-3 my-2" type="button" @onclick="@LoadMore">Load more</button>
    </div>
}

<div class="position-fixed main-margin p-3" style="right: 0; bottom: 0;">
    <button disabled="@requestDisabled" @onclick="@(async () => await LoadMoreFromNoteAsync())" type="button" class="btn btn-secondary rounded-5 shadow fs-4" style="height: 3rem; width: 3rem;">
        <i class="bi bi-arrow-repeat"></i>
    </button>
</div>

@code {
    private ConcurrentDictionary<string, Event> renderedN = new(), newN = new(), oldN = new();
    private int dbLimit;
    private SubscriptionFilter? newFilter, oldFilter;
    private ConcurrentDictionary<string, SubscriptionFilter> detailsFiltersByAccountId = new();
    private Timer? refreshPageTimer;
    private string[]? renderedIds;
    private NoteTreeViewer? noteTreeViewer;
    private bool requestDisabled;

    private const int RelayQueryLimit = 13;
    private const int SecondsForDetailsFilters = 30;

    private void ShowNewPosts()
    {
        EventExtension.MergeAndClear(renderedN, newN);
        TrimOlder();
    }

    private void LoadMore()
    {
        dbLimit += RelayQueryLimit;
        var rawFilters = BaseFilter.GetFilters();
        foreach (var rawFilter in rawFilters)
            rawFilter.Kinds = MessageKinds;
        EventExtension.Merge(renderedN, feedService.GetNotesFeed(rawFilters, dbLimit));
    }

    private async Task LoadMoreFromNoteAsync()
    {
        if (noteTreeViewer == null)
        {
            return;
        }
        var noteViewer = await noteTreeViewer.GetFirstVisibleAsync();
        if (noteViewer == null)
        {
            return;
        }

        oldFilter.limitFilterData.Until = DateTimeOffset.FromUnixTimeSeconds(noteViewer.Tree.Note.CreatedAtCurated);
        relayService.RefreshFilters(oldFilter);

        requestDisabled = true;

        Timer? enableTimer = null;
        enableTimer = new Timer(new TimerCallback(_ =>
        {
            requestDisabled = false;
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
            enableTimer?.Dispose();
        }), null, 5000, 5000);
    }

    private void ReceivedNotes(object? sender, (string filterId, IEnumerable<Event> notes) data)
    {
        if (_disposed || renderedN == null || renderedIds == null || (data.filterId != oldFilter.Id && data.filterId != newFilter.Id))
            return;

        var notes = data.notes.Where(n => MessageKinds.Contains(n.Kind));
        if (!notes.Any())
            return;

        UpdateDetailFilters(notes);

        if (data.filterId == oldFilter.Id)
        {
            EventExtension.Merge(renderedN, notes);
            TrimOlder();
        }
        else
        {
            EventExtension.Merge(newN, notes);
        }
    }

    private void UpdateDetailFilters(IEnumerable<Event> newEvents)
    {
        var accountIds = newEvents
            .SelectMany(n => new[] { n.PublicKey }.Union(n.GetMentions().Where(n => n.Type == 'p').Select(n => n.MentionId)))
            .Where(n => !detailsFiltersByAccountId.ContainsKey(n));
        foreach (var accountId in accountIds)
        {
            var filter = new AccountDetailsSubscriptionFilter(accountId)
            {
                DestroyOnEose = true,
                DestroyOnFirstEvent = true,
                DestroyOn = DateTimeOffset.UtcNow.AddSeconds(SecondsForDetailsFilters)
            };
            if (detailsFiltersByAccountId.GetOrAdd(accountId, filter) == filter)
            {
                relayService.AddFilter(filter);
            };
        }
    }

    protected override void OnParametersSet()
    {
        Cleanup();

        renderedN = new();
        newN = new();
        oldN = new();
        renderedIds = new string[0];

        newFilter = BaseFilter.Clone();
        oldFilter = BaseFilter.Clone();
        oldFilter.limitFilterData.Limit = RelayQueryLimit;
        oldFilter.limitFilterData.Until = DateTimeOffset.UtcNow;
        newFilter.limitFilterData.Limit = 1;
        dbLimit = 0;

        relayService.AddFilters(newFilter, oldFilter);

        LoadMore();

        feedService.ReceivedNotes += ReceivedNotes;
        feedService.NoteReceivedChild += NoteReceivedChild;

        refreshPageTimer = new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 0, 5000);
    }

    private void NoteReceivedChild(object? sender, (string EventId, Event Child) data)
    {
        if (!renderedN.ContainsKey(data.EventId))
            return;

        renderedN[data.Child.Id] = data.Child;
        TrimOlder();
        InvokeAsync(() => StateHasChanged());
    }

    private void TrimOlder()
    {
        while (renderedN?.Count > dbLimit)
        {
            var oldest = renderedN.Values.OrderBy(n => n.CreatedAtCurated).FirstOrDefault();
            if (oldest == null)
                break;
            renderedN.TryRemove(oldest.Id, out _);
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        feedService.ReceivedNotes -= ReceivedNotes;
        feedService.NoteReceivedChild -= NoteReceivedChild;
        relayService.DeleteFilters(newFilter, oldFilter);
        relayService.DeleteFilters(detailsFiltersByAccountId.Values);
        refreshPageTimer?.Dispose();
    }
    #endregion

}
