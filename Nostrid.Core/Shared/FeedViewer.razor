@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService
@inject AccountService accountService
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public SubscriptionFilter BaseFilter { get; set; } = null!;

    [Parameter, EditorRequired]
    public int[] MessageKinds { get; set; }

    [Parameter]
    public bool ShowAsMessages { get; set; }

    [CascadingParameter]
    public Scripts? Scripts { get; set; }
}

<div @ref="container"
     class="px-3 d-flex flex-column flex-grow-1 @(ShowAsMessages ? "position-relative flex-column-reverse overflow-y-auto" : "")"
     style="margin: 0 -1rem -1rem -1rem; flex-basis: 0;">
    
    <ElementObserver OnIntersecting="@ShowNewPostsIntersecting" Margin="-30px" />
    <UpdatabableElement @ref="@labelShowNewPosts">
        @if (newN.Count > 0)
        {
            <div class="sticky-top text-center px-3 @(!isShowNewPostsFloating ? "border-top" : "")" style="top: 30px; margin: 0 -1rem; z-index: 10;">
                <button class="btn @(isShowNewPostsFloating ? "btn-primary shadow" : "btn-link") my-2" type="button" @onclick="ShowNewPosts">Show @newN.Count new posts</button>
            </div>
        }
    </UpdatabableElement>
    
    @{
        var trees = ShowAsMessages ? feedService.GetTreesFromNotesNoGrouping(renderedN.Values) : feedService.GetTreesFromNotes(renderedN.Values);
        // Root nodes are sorted newest on top
        trees.Sort((a, b) => b.Note.CreatedAtCurated.CompareTo(a.Note.CreatedAtCurated));
    }
    <NoteTreeViewer @ref="noteTreeViewer" Trees="@trees" ShowAsMessage="@ShowAsMessages" />
    
    <div class="text-center px-3 py-2 @(!ShowAsMessages ? "border-top" : "")" style="margin: 0 -1rem;">
        <UpdatabableElement @ref="@labelLoadMore">
            @if (loading)
            {
                <div class="spinner-border mx-3 my-2" role="status">
                    <span class="visually-hidden">Waiting for feed...</span>
                </div>
            } 
            else if (moreResults)
            {
                <ElementObserver OnIntersecting="@LoadMoreIntersecting" Margin="300px" />
            }
        </UpdatabableElement>
    </div>

    <div class="position-absolute" style="height: 44px; width: 44px; @(!ShowAsMessages ? "bottom" : "top"): 1rem; right: 1rem;">
        <div class="position-fixed">
            <UpdatabableElement @ref="@labelLoadMoreFromNote">
                <button disabled="@requestDisabled" @onclick="@(async () => await LoadMoreFromNoteAsync())" type="button" class="btn btn-secondary rounded-5 shadow fs-4">
                    <i class="bi bi-arrow-repeat"></i>
                </button>
            </UpdatabableElement>
        </div>
    </div>

</div>

@code {
    private ConcurrentDictionary<string, Event> renderedN = new(), newN = new(), oldN = new();
    private int dbLimit;
    private SubscriptionFilter? newFilter, oldFilter;
    private string[]? renderedIds;
    private NoteTreeViewer? noteTreeViewer;
    private bool requestDisabled;
    private UpdatabableElement? labelShowNewPosts, labelLoadMore, labelLoadMoreFromNote;
    private bool isShowNewPostsFloating = false;
    private ElementReference? container;
    private static object lockobj = new();
    private bool loading = false;
    private bool moreResults = false;

    private DateTime lastUpdate;
    private Task? updateTask;
    private CancellationTokenSource cancellationTokenSource = new();

    private const int MinSecondsBetweenUpdates = 3;
    private const int RelayQueryLimit = 13;
    private const int SecondsForDetailsFilters = 30;

    private async Task ShowNewPosts()
    {
        EventExtension.MergeAndClear(renderedN, newN);
        TrimOlder();
        if (Scripts != null && container != null)
        {
            await Scripts.InvokeVoidAsync("scrollTop", container, 0);
        }
    }

    private void ShowNewPostsIntersecting(object? sender, bool intersecting)
    {
        isShowNewPostsFloating = !intersecting;
        labelShowNewPosts?.Update();
    }

    private void LoadMoreIntersecting(object? sender, bool intersecting)
    {
        if (intersecting)
        {
            LoadMore();
        }
    }

    private void LoadMore()
    {
        lock (lockobj)
        {
            if (loading) return;
            loading = true;
        }
        labelLoadMore?.Update();

        Task.Run(() =>
        {
            dbLimit += RelayQueryLimit;
            var prevRenderedN = renderedN.Count;
            EventExtension.Merge(renderedN, feedService.GetNotesFeed(BaseFilter, dbLimit, MessageKinds));
            loading = false;
            moreResults = renderedN.Count > prevRenderedN;
            InvokeAsync(() => StateHasChanged());
        });
    }

    private async Task LoadMoreFromNoteAsync()
    {
        if (noteTreeViewer == null)
        {
            return;
        }
        var treeItem = await noteTreeViewer.GetFirstVisibleAsync();
        if (treeItem == null)
        {
            return;
        }

        oldFilter.LimitFilterData.Until = DateTimeOffset.FromUnixTimeSeconds(treeItem.Tree.Note.CreatedAtCurated);
        relayService.RefreshFilters(oldFilter);

        requestDisabled = true;

        _ = Task.Delay(5000).ContinueWith((_) =>
        {
            requestDisabled = false;
            labelLoadMoreFromNote?.Update();
        });
    }

    private void ReceivedNotes(IEnumerable<Event> notes)
    {
        if (_disposed)
        {
            return;
        }

        notes = notes.Where(n => MessageKinds.Contains(n.Kind));
        if (!notes.Any())
        {
            return;
        }

        if (ShowAsMessages)
        {
            EventExtension.Merge(renderedN, notes);
            TrimOlder();
            UpdateIfNeeded();
        }
        else
        {
            EventExtension.Merge(newN, notes);
            labelShowNewPosts?.Update();
        }
    }

    protected override void OnParametersSet()
    {
        Cleanup();

        cancellationTokenSource = new();

        renderedN = new();
        newN = new();
        oldN = new();
        renderedIds = new string[0];

        newFilter = BaseFilter.Clone();
        newFilter.Handler = ReceivedNotes;
        oldFilter = BaseFilter.Clone();
        oldFilter.Handler = ReceivedNotes;
        oldFilter.LimitFilterData.Limit = RelayQueryLimit;
        oldFilter.LimitFilterData.Until = DateTimeOffset.UtcNow;
        newFilter.LimitFilterData.Limit = 1;
        dbLimit = 0;

        relayService.AddFilters(newFilter, oldFilter);

        LoadMore();

        feedService.NoteReceivedChild += NoteReceivedChild;
    }

    private void NoteReceivedChild(object? sender, (string EventId, Event Child) data)
    {
        if (!renderedN.ContainsKey(data.EventId))
            return;

        ReceivedNotes(new[] { data.Child });
    }

    private void TrimOlder()
    {
        if (renderedN == null || renderedN.Count <= dbLimit)
        {
            return;
        }

        if (renderedN.Count > dbLimit * 2)
        {
            // Better to create a new list
            renderedN = new(renderedN.OrderByDescending(n => n.Value.CreatedAtCurated).Take(dbLimit));
        }
        else
        {
            // Better to remove older items
            var toRemove = renderedN.Values.OrderByDescending(n => n.CreatedAtCurated).Select(n => n.Id).Skip(dbLimit).ToList();
            foreach (var item in toRemove)
            {
                renderedN.TryRemove(item, out _);
            }
        }
    }

    private void UpdateIfNeeded()
    {
        var waitFor = lastUpdate.AddSeconds(MinSecondsBetweenUpdates) < DateTime.UtcNow ? 0 : MinSecondsBetweenUpdates;
        updateTask = Task.Delay(TimeSpan.FromSeconds(waitFor), cancellationTokenSource.Token).ContinueWith((_) =>
        {
            InvokeAsync(() => StateHasChanged());
            updateTask = null;
        }, cancellationTokenSource.Token);
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        feedService.NoteReceivedChild -= NoteReceivedChild;
        relayService.DeleteFilters(newFilter, oldFilter);
        cancellationTokenSource.Cancel();
    }
    #endregion

}
