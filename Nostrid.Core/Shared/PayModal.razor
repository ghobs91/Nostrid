@using Nostrid.Data;
@using Nostrid.Interfaces;
@using Nostrid.Model;
@using QRCoder;

@inject Lud06Service lud06Service
@inject AccountService accountService
@inject IClipboardService clipboardService

<ModalContainer @ref="modalContainer">
    <div class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">
                        Pay to <AccountName id="@accountId" OnlyText="true"></AccountName>
                    </h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex flex-column align-items-center justify-content-center h-100" style="min-height: 200px;">
                        @if (state == State.Loading)
                        {
                            <div class="spinner-border" role="status">
                              <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else if (state == State.RequestAmount)
                        {
                            <div class="text-center">
                                <span class="fs-5">Amount</span>
                                <div class="d-flex flex-row align-items-end position-relative border-bottom border-secondary border-opacity-25">
                                    <input type="number" min="@Min" max="@Max" class="form-control fw-bold glow-0 fs-5 text-center border-0" style="padding: 0px 35px 0 50px;"
                                           value="@amount" @oninput="@(args => { long value; amount = long.TryParse(args.Value?.ToString(), out value) ? value : Min; })">
                                    <span class="position-absolute" style="bottom: 0; right: 0">sats</span>
                                </div>
                                <button type="button" class="btn btn-primary my-4" @onclick="@Pay">
                                    <i class="bi bi-lightning-charge"></i> Pay
                                </button>
                            </div>
                        }
                        else if (state == State.ShowInvoice)
                        {
                            <img style="max-width: 70%; max-height: 70vh;" src="@invoiceQR" alt="qr" />
                            <div>
                                <a href="@($"lightning:{invoice}")" class="btn btn-outline-secondary my-2 me-4" style="width: 130px;">
                                    Open in wallet
                                </a>
                                <button type="button" class="btn btn-outline-secondary my-2" style="width: 130px;" @onclick="@CopyInvoice">
                                    <i class="bi bi-files"></i>
                                    Copy
                                </button>
                            </div>
                        }
                        else
                        {
                            <i class="bi bi-exclamation-triangle-fill fs-5"></i>
                            <div class="mb-2">Something went wrong.</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</ModalContainer>

<Scripts @ref="scripts" />

@code {
    private Scripts? scripts;

    private enum State
    {
        Loading,
        RequestAmount,
        ShowInvoice,
        Error
    }

    private const int MSAT_UNIT = 1000;

    private ModalContainer? modalContainer;
    private string accountId;
    private State state = State.Loading;
    private Lud06Data? lud06Data;
    private long amount;
    private string? invoice;
    private string? invoiceQR;

    private long Min => lud06Data?.MinSendableMsat / MSAT_UNIT ?? 1;
    private long Max => lud06Data?.MaxSendableMsat / MSAT_UNIT ?? long.MaxValue;

    public void Show(string accountId)
    {
        this.accountId = accountId;

        var accountDetails = accountService.GetAccountDetails(accountId);

        var ln = accountDetails?.Lud16Id ?? accountDetails?.Lud06Url;

        if (ln.IsNullOrEmpty())
        {
            state = State.Error;
            InvokeAsync(() => StateHasChanged());
            return;
        }
        else
        {
            state = State.Loading;
            InvokeAsync(() => StateHasChanged());
        }

        modalContainer?.Show();

        lud06Service.Query(ln).ContinueWith(t =>
        {
            if (!t.IsCompletedSuccessfully
                || t.Result == null)
            {
                state = State.Error;
            }
            else
            {
                state = State.RequestAmount;
                lud06Data = t.Result;
                amount = Min;
            }
            InvokeAsync(() => StateHasChanged());
        });
    }

    private void Pay()
    {
        if (lud06Data == null
            || amount > Max
            || amount < Min)
        {
            return;
        }

        state = State.Loading;

        lud06Service.GetPayReq(lud06Data, amount * MSAT_UNIT).ContinueWith(t =>
        {
            if (!t.IsCompletedSuccessfully
                || t.Result == null)
            {
                state = State.Error;
            }
            else
            {
                state = State.ShowInvoice;
                invoice = t.Result;

                var bgColor = scripts?.Invoke<string>("getCssVariable", "--bs-body-bg");
                var color = scripts?.Invoke<string>("getCssVariable", "--bs-emphasis-color");
                
                var qrData = QRCodeGenerator.GenerateQrCode(t.Result, QRCodeGenerator.ECCLevel.Q);
                invoiceQR = $"data:image/png;base64,{Convert.ToBase64String(new BitmapByteQRCode(qrData).GetGraphic(10, color ?? "000000", bgColor ?? "ffffff"))}";
            }
            InvokeAsync(() => StateHasChanged());
        });
    }

    private async Task CopyInvoice()
    {
        if (invoice != null)
        {
            await clipboardService.CopyAsync(invoice);
        }
    }
}
