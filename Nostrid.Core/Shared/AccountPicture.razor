@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool OnlyText { get; set; }

    [Parameter]
    public int? Size { get; set; }
}

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService _accountService

@if (_details != null && _details.PictureUrl.IsNotNullOrEmpty() && Uri.IsWellFormedUriString(_details.PictureUrl, UriKind.Absolute))
{
    <img style="width:@(Size ?? DEFAULT_SIZE)px; height:@(Size ?? DEFAULT_SIZE)px" src="@_details.PictureUrl" class="card-img-top rounded-999" alt="">
}
else if (Id.IsNotNullOrEmpty())
{
    <div style="width:@(Size ?? DEFAULT_SIZE)px; height:@(Size ?? DEFAULT_SIZE)px" class="rounded-999 overflow-hidden">
        @((MarkupString)Utils.ToSvgIdenticon(Id, Size ?? DEFAULT_SIZE))
    </div>
}

@code
{
    private const int DEFAULT_SIZE = 48;

    private AccountDetails _details;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _details = _accountService.GetAccountDetails(Id);
        _accountService.AccountDetailsChanged += AccountDetailsChanged;
    }

    private void AccountDetailsChanged(object? sender, (string accountId, AccountDetails details) data)
    {
        if (data.accountId == Id)
        {
            _details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        _accountService.AccountDetailsChanged -= AccountDetailsChanged;
    }
    #endregion
}