@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@implements IDisposable

@inject EventDatabase eventDatabase
@inject AccountService accountService

@code {
    [Parameter, EditorRequired]
    public string AccountId { get; set; } = null!;

    [Parameter]
    public string? Css { get; set; }
}

@{
    var isFollowing = accountService.IsFollowing(AccountId); 
}
<button class="btn @Css @(!isFollowing ? "btn-primary" : "btn-danger")"
        @onclick="@(async () => await FollowUnfollow(true))" @onclick:stopPropagation="true">
    @(!isFollowing ? "Follow" : "Unfollow")
</button>
<div @onclick:preventDefault="true">
    @confirmationModalRenderFragment
</div>

@code
{
    private RenderFragment confirmationModalRenderFragment;
    private ConfirmationModal confirmationModal;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        accountService.AccountFollowsChanged += AccountFollowsChanged;
    }

    private void AccountFollowsChanged(object? sender, (string accountId, List<string> follows) data)
    {
        if (_disposed)
            return;
        InvokeAsync(() => StateHasChanged());
    }

    private async Task FollowUnfollow(bool showConfirmation = true)
    {
        var follow = !accountService.IsFollowing(AccountId);
        var noFollows = eventDatabase.GetFollowCount(AccountId) == 0;
        if (showConfirmation && follow && noFollows)
        {
            if (confirmationModalRenderFragment == null)
            {
                confirmationModalRenderFragment = new RenderFragment(builder =>
                {
                    builder.OpenComponent<ConfirmationModal>(0);
                    builder.AddComponentReferenceCapture(1, instance => { confirmationModal = instance as ConfirmationModal; });
                    builder.CloseComponent();
                    InvokeAsync(() => ShowConfirmation());
                });
            }
            else
            {
                ShowConfirmation();
            }
        }
        else
        {
            await accountService.FollowUnfollow(AccountId, !follow);
        }
    }

    private void ShowConfirmation()
    {
        confirmationModal?.Show(
            ConfirmationModal.Options.Create(
                "Is this your first follow ever? We haven't seen any other follows yet. If you continue, you will have one follow in total.\nAre you sure you want to continue?",
                "Follow account",
                ConfirmationModal.Options.Button.CreateButton("Yes, this is my first follow", async () => await FollowUnfollow(false), "btn-outline-secondary"),
                ConfirmationModal.Options.Button.CreateButton("No, I'll wait until I receive all my follows", null, "btn-outline-secondary")));
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountFollowsChanged -= AccountFollowsChanged;
    }
    #endregion
}
